{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# InfraVision - Green Hydrogen Infrastructure Planning\n\n## Overview\n\nInfraVision is an interactive web-based tool designed to revolutionize the planning and optimization of green hydrogen infrastructure. The application combines gamification, AI intelligence, and impact metrics to make infrastructure planning engaging and accessible for urban planners, energy companies, project developers, and policy analysts.\n\nThe platform features three core functionalities: gamified optimization through drag-and-drop map interactions, AI-assisted site suggestions using machine learning algorithms, and comprehensive sustainability impact dashboards that quantify environmental and economic benefits. Users can interactively place hydrogen plant markers on maps, receive real-time suitability scoring, and access AI-powered recommendations for optimal site locations.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client application is built with React and TypeScript, utilizing a modern component-based architecture. The UI leverages shadcn/ui components built on Radix UI primitives, providing a consistent and accessible design system. The application uses Wouter for client-side routing and React Query (TanStack Query) for efficient data fetching and state management.\n\nInteractive mapping functionality is implemented using Leaflet.js, enabling drag-and-drop site placement and real-time visualization of hydrogen plants, renewable energy sources, and demand centers. The mapping system supports dynamic marker placement with immediate suitability scoring feedback.\n\n### Backend Architecture\nThe server is built with Express.js and follows a RESTful API design pattern. The application uses a layered architecture with separate concerns for routing, data access, and business logic. OpenAI integration provides AI-powered site analysis and chatbot functionality for user assistance.\n\nThe backend implements real-time suitability scoring using rule-based algorithms that consider factors like proximity to renewable energy sources, industrial demand hubs, transportation costs, and regulatory environments. Distance calculations and infrastructure proximity analysis are performed server-side for accurate scoring.\n\n### Authentication System\nUser authentication is handled through Replit's OpenID Connect integration using the openid-client library. The system maintains user sessions with PostgreSQL-backed session storage using connect-pg-simple. Authentication state is managed client-side through React Query with automatic token handling and session validation.\n\n### Database Design\nThe application uses PostgreSQL as the primary database with Drizzle ORM for type-safe database operations. The schema includes tables for users, hydrogen sites, renewable energy sources, and demand centers. Site data includes geographic coordinates, suitability scores, and impact metrics like CO2 savings and supported industries.\n\nSession management is implemented with a dedicated sessions table required for Replit Auth integration. The database supports both user-placed sites and AI-suggested locations with appropriate flags and metadata.\n\n### AI Integration\nOpenAI's GPT models power two key features: an intelligent chatbot assistant that helps users understand hydrogen infrastructure planning, and automated site analysis that provides suitability scoring with detailed factor breakdowns. The AI system generates recommendations based on geographic data, renewable energy proximity, and infrastructure considerations.\n\n## External Dependencies\n\n### Third-Party Services\n- **Neon Database**: PostgreSQL-compatible serverless database for production data storage\n- **OpenAI API**: Powers the AI chatbot assistant and site analysis features\n- **Replit Authentication**: Handles user authentication via OpenID Connect\n\n### Key Libraries and Frameworks\n- **React**: Frontend framework with TypeScript support\n- **Express.js**: Backend web application framework\n- **Drizzle ORM**: Type-safe database ORM for PostgreSQL operations\n- **Leaflet.js**: Interactive mapping library for geographic visualizations\n- **Radix UI**: Accessible component primitives for the design system\n- **TailwindCSS**: Utility-first CSS framework for styling\n- **React Query**: Data fetching and state management\n- **Chart.js**: Data visualization for impact dashboards\n- **Vite**: Build tool and development server\n\n### Development Tools\n- **TypeScript**: Static type checking across the entire application\n- **ESBuild**: Fast bundling for production builds\n- **PostCSS**: CSS processing with Tailwind integration\n- **Zod**: Runtime type validation for API schemas","size_bytes":4721},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        pulse: {\n          \"0%, 100%\": {\n            opacity: \"1\",\n            transform: \"scale(1)\",\n          },\n          \"50%\": {\n            opacity: \"0.7\",\n            transform: \"scale(1.1)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        pulse: \"pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3054},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/openai.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\n// Using Gemini 2.5 Flash with proper API key\nconst genAI = new GoogleGenAI({ \n  apiKey: process.env.GEMINI_API_KEY || \"\"\n});\n\nexport interface ChatMessage {\n  role: 'user' | 'assistant';\n  content: string;\n}\n\nexport interface SiteAnalysis {\n  suitabilityScore: number;\n  factors: {\n    renewableAccess: number;\n    transportCost: string;\n    demandProximity: string;\n    waterAvailability: string;\n    regulatorySupport: string;\n  };\n  recommendations: string[];\n  co2SavedAnnually: number;\n  industriesSupported: number;\n  renewableUtilization: number;\n}\n\nexport async function chatWithAssistant(messages: ChatMessage[]): Promise<string> {\n  try {\n    const systemPrompt = `You are InfraVision AI Assistant, an expert in India's green hydrogen infrastructure planning. You specialize in:\n\n1. India's National Green Hydrogen Mission and government initiatives\n2. Optimal locations for hydrogen plants across Indian states\n3. Real Indian projects like GAIL Guna, Adani Kutch, NTPC facilities\n4. Suitability scoring based on renewable proximity, demand centers, and geography\n5. Indian regulatory framework and incentives under SIGHT scheme\n6. Environmental impact specific to Indian industrial needs\n\nContext about India's hydrogen landscape:\n- Mission target: 5 MMT green hydrogen production by 2030\n- Key states: Gujarat, Rajasthan, Maharashtra, Tamil Nadu for renewable potential\n- Major players: NTPC, Adani, GAIL, Reliance, Tata Power\n- Focus sectors: Steel (Tata, JSW), refineries (IOCL), chemical plants, mobility\n\nProvide helpful, India-specific advice about green hydrogen infrastructure. Keep responses practical and relevant to Indian context.`;\n\n    // Use proper Gemini conversation format\n    const conversationHistory = messages.map(msg => ({\n      role: msg.role === 'user' ? 'user' : 'model',\n      parts: [{ text: msg.content }]\n    }));\n\n    const result = await genAI.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: conversationHistory,\n      config: {\n        systemInstruction: systemPrompt\n      }\n    });\n    \n    const text = result.candidates?.[0]?.content?.parts?.[0]?.text || \"I apologize, but I couldn't process your request at the moment. Please try asking about India's green hydrogen infrastructure or specific locations for hydrogen plants.\";\n    \n    return text;\n  } catch (error) {\n    console.error(\"Gemini API error:\", error);\n    \n    // Provide intelligent fallback responses based on common queries\n    const userQuery = messages[messages.length - 1]?.content.toLowerCase() || '';\n    \n    if (userQuery.includes('location') || userQuery.includes('where') || userQuery.includes('best')) {\n      return \"Based on India's National Green Hydrogen Mission, the best locations for hydrogen plants are:\\n\\n1. **Gujarat** - Excellent solar/wind resources, strong industrial base\\n2. **Rajasthan** - Abundant solar potential, good transport connectivity\\n3. **Maharashtra** - Major industrial demand, renewable energy access\\n4. **Tamil Nadu** - Coastal advantages, wind energy potential\\n\\nOur AI suggestions show real projects like GAIL Guna (operational), Adani Kutch, and NTPC facilities. Click on the green glowing markers to see these actual government-approved locations!\";\n    }\n    \n    if (userQuery.includes('score') || userQuery.includes('suitability') || userQuery.includes('rating')) {\n      return \"Our suitability scoring considers key factors for Indian locations:\\n\\n• **Renewable Access** (30 points) - Distance to solar/wind farms\\n• **Demand Proximity** (25 points) - Nearby steel, chemical, refinery industries\\n• **Geographic Advantage** (15 points) - Gujarat, Rajasthan get highest scores\\n• **Transport Cost** - Based on industrial hub connectivity\\n• **Regulatory Support** - India has strong hydrogen policies\\n\\nDrag and drop anywhere on the map to see real-time scoring!\";\n    }\n    \n    if (userQuery.includes('project') || userQuery.includes('government') || userQuery.includes('mission')) {\n      return \"India's National Green Hydrogen Mission (₹19,744 crore budget) includes:\\n\\n**Operational Projects:**\\n• GAIL Guna - 4.3 tonnes/day (operational 2024)\\n• Adani Kutch - 5MW off-grid facility\\n• NTPC Kawas - H2 blending in natural gas\\n\\n**Major Upcoming:**\\n• NTPC Rann of Kutch - 4,750MW renewable park\\n• Green ammonia plants in Dhule, Sagar\\n• 37 H2 vehicles across 10 routes\\n\\nTarget: 5 MMT production by 2030 with 125 GW renewable capacity!\";\n    }\n    \n    return \"I'm your InfraVision AI assistant for India's green hydrogen infrastructure! I can help with:\\n\\n• Finding optimal plant locations across India\\n• Understanding suitability scores and factors\\n• Information about real government projects\\n• Renewable energy integration strategies\\n\\nTry asking: 'Where are the best locations?' or 'Tell me about current projects' or just click anywhere on the map to analyze that location!\";\n  }\n}\n\nexport async function analyzeSiteLocation(\n  latitude: number,\n  longitude: number,\n  nearbyRenewables: Array<{ type: string; distance: number; capacity: number }>,\n  nearbyDemand: Array<{ type: string; distance: number; level: string }>\n): Promise<SiteAnalysis> {\n  try {\n    const prompt = `Analyze this hydrogen plant location:\nCoordinates: ${latitude}, ${longitude}\n\nNearby Renewable Sources:\n${nearbyRenewables.map(r => `- ${r.type}: ${r.distance}km away, ${r.capacity}MW capacity`).join('\\n')}\n\nNearby Demand Centers:\n${nearbyDemand.map(d => `- ${d.type}: ${d.distance}km away, ${d.level} demand`).join('\\n')}\n\nProvide a detailed analysis with:\n1. Overall suitability score (0-100)\n2. Factor ratings for renewable access, transport cost, demand proximity, water availability, regulatory support\n3. Specific recommendations\n4. Estimated annual CO2 savings (tons)\n5. Number of industries that could be supported\n6. Renewable energy utilization percentage\n\nReturn your analysis in JSON format with this exact structure:\n{\n  \"suitabilityScore\": number,\n  \"factors\": {\n    \"renewableAccess\": number,\n    \"transportCost\": \"string\",\n    \"demandProximity\": \"string\", \n    \"waterAvailability\": \"string\",\n    \"regulatorySupport\": \"string\"\n  },\n  \"recommendations\": [\"string array\"],\n  \"co2SavedAnnually\": number,\n  \"industriesSupported\": number,\n  \"renewableUtilization\": number\n}`;\n\n    const result = await genAI.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: [{ role: \"user\", parts: [{ text: prompt }] }]\n    });\n\n    const responseText = result.candidates?.[0]?.content?.parts?.[0]?.text || '{}';\n    const analysis = JSON.parse(responseText);\n    \n    return {\n      suitabilityScore: Math.max(0, Math.min(100, analysis.suitabilityScore || 50)),\n      factors: {\n        renewableAccess: Math.max(0, Math.min(100, analysis.factors?.renewableAccess || 50)),\n        transportCost: analysis.factors?.transportCost || \"Medium\",\n        demandProximity: analysis.factors?.demandProximity || \"Medium\",\n        waterAvailability: analysis.factors?.waterAvailability || \"Good\",\n        regulatorySupport: analysis.factors?.regulatorySupport || \"Moderate\"\n      },\n      recommendations: analysis.recommendations || [\"Consider local infrastructure development\"],\n      co2SavedAnnually: Math.max(0, analysis.co2SavedAnnually || 25000),\n      industriesSupported: Math.max(0, analysis.industriesSupported || 5),\n      renewableUtilization: Math.max(0, Math.min(100, analysis.renewableUtilization || 65))\n    };\n  } catch (error) {\n    console.error(\"Site analysis error:\", error);\n    // Return fallback analysis\n    return {\n      suitabilityScore: 50,\n      factors: {\n        renewableAccess: 50,\n        transportCost: \"Medium\",\n        demandProximity: \"Medium\", \n        waterAvailability: \"Good\",\n        regulatorySupport: \"Moderate\"\n      },\n      recommendations: [\"Detailed site assessment recommended\"],\n      co2SavedAnnually: 25000,\n      industriesSupported: 5,\n      renewableUtilization: 65\n    };\n  }\n}\n","size_bytes":8018},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n// Removed Replit Auth - using Supabase instead\nimport { chatWithAssistant, analyzeSiteLocation, type ChatMessage } from \"./openai\";\nimport { insertHydrogenSiteSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Since we're using Supabase for auth, we don't need server-side auth routes\n\n  // Hydrogen sites routes\n  app.post('/api/hydrogen-sites', async (req: any, res) => {\n    try {\n      // For demo purposes, we'll use a default user ID\n      const userId = \"demo-user\";\n      const siteData = insertHydrogenSiteSchema.parse({\n        ...req.body,\n        userId\n      });\n\n      // Get nearby infrastructure for AI analysis\n      const renewables = await storage.getRenewableSources();\n      const demandCenters = await storage.getDemandCenters();\n      \n      // Calculate distances and find nearby infrastructure\n      const nearbyRenewables = renewables\n        .map(r => ({\n          type: r.type,\n          distance: calculateDistance(\n            parseFloat(siteData.latitude), \n            parseFloat(siteData.longitude),\n            parseFloat(r.latitude), \n            parseFloat(r.longitude)\n          ),\n          capacity: r.capacity || 100\n        }))\n        .filter(r => r.distance < 100) // Within 100km\n        .slice(0, 5);\n\n      const nearbyDemand = demandCenters\n        .map(d => ({\n          type: d.type,\n          distance: calculateDistance(\n            parseFloat(siteData.latitude), \n            parseFloat(siteData.longitude),\n            parseFloat(d.latitude), \n            parseFloat(d.longitude)\n          ),\n          level: d.demandLevel\n        }))\n        .filter(d => d.distance < 150) // Within 150km\n        .slice(0, 5);\n\n      // Calculate location-based analysis\n      const analysis = calculateLocationSuitability(\n        parseFloat(siteData.latitude),\n        parseFloat(siteData.longitude),\n        nearbyRenewables,\n        nearbyDemand\n      );\n\n      // Create site with AI-calculated values\n      const site = await storage.createHydrogenSite({\n        ...siteData,\n        suitabilityScore: analysis.suitabilityScore,\n        co2SavedAnnually: analysis.co2SavedAnnually,\n        industriesSupported: analysis.industriesSupported,\n        renewableUtilization: analysis.renewableUtilization\n      });\n\n      res.json({ site, analysis });\n    } catch (error) {\n      console.error(\"Error creating hydrogen site:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid site data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create hydrogen site\" });\n    }\n  });\n\n  app.get('/api/hydrogen-sites', async (req: any, res) => {\n    try {\n      // For demo purposes, use default user ID\n      const userId = \"demo-user\";\n      const sites = await storage.getHydrogenSites(userId);\n      res.json(sites);\n    } catch (error) {\n      console.error(\"Error fetching hydrogen sites:\", error);\n      res.status(500).json({ message: \"Failed to fetch hydrogen sites\" });\n    }\n  });\n\n  app.delete('/api/hydrogen-sites/:id', async (req: any, res) => {\n    try {\n      // For demo purposes, use default user ID\n      const userId = \"demo-user\";\n      const siteId = req.params.id;\n      await storage.deleteHydrogenSite(siteId, userId);\n      res.json({ message: \"Site deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting hydrogen site:\", error);\n      res.status(500).json({ message: \"Failed to delete hydrogen site\" });\n    }\n  });\n\n  // AI suggestions route\n  app.get('/api/ai-suggestions', async (req, res) => {\n    try {\n      const country = req.query.country as string;\n      let aiSites = await storage.getAiSuggestedSites();\n      \n      // Filter by country if specified\n      if (country && country.toLowerCase() !== 'india') {\n        // For now, we only have Indian data, so return empty for other countries\n        // In a real application, you would have data for other countries\n        aiSites = [];\n      }\n      \n      res.json(aiSites);\n    } catch (error) {\n      console.error(\"Error fetching AI suggestions:\", error);\n      res.status(500).json({ message: \"Failed to fetch AI suggestions\" });\n    }\n  });\n\n  // Infrastructure data routes with country filtering\n  app.get('/api/renewable-sources', async (req, res) => {\n    try {\n      const country = req.query.country as string;\n      let sources = await storage.getRenewableSources();\n      \n      // Filter by country if specified\n      if (country && country.toLowerCase() !== 'india') {\n        // For now, we only have Indian data\n        sources = [];\n      }\n      \n      res.json(sources);\n    } catch (error) {\n      console.error(\"Error fetching renewable sources:\", error);\n      res.status(500).json({ message: \"Failed to fetch renewable sources\" });\n    }\n  });\n\n  app.get('/api/demand-centers', async (req, res) => {\n    try {\n      const country = req.query.country as string;\n      let centers = await storage.getDemandCenters();\n      \n      // Filter by country if specified\n      if (country && country.toLowerCase() !== 'india') {\n        // For now, we only have Indian data\n        centers = [];\n      }\n      \n      res.json(centers);\n    } catch (error) {\n      console.error(\"Error fetching demand centers:\", error);\n      res.status(500).json({ message: \"Failed to fetch demand centers\" });\n    }\n  });\n\n  // Chatbot route\n  app.post('/api/chat', async (req, res) => {\n    try {\n      const { messages }: { messages: ChatMessage[] } = req.body;\n      \n      if (!messages || !Array.isArray(messages)) {\n        return res.status(400).json({ message: \"Invalid messages format\" });\n      }\n\n      const response = await chatWithAssistant(messages);\n      res.json({ response });\n    } catch (error) {\n      console.error(\"Error in chat endpoint:\", error);\n      res.status(500).json({ message: \"Failed to get chat response\" });\n    }\n  });\n\n  // Site analysis route\n  app.post('/api/analyze-site', async (req, res) => {\n    try {\n      const { latitude, longitude } = req.body;\n      \n      if (!latitude || !longitude) {\n        return res.status(400).json({ message: \"Latitude and longitude are required\" });\n      }\n\n      // Get nearby infrastructure\n      const renewables = await storage.getRenewableSources();\n      const demandCenters = await storage.getDemandCenters();\n      \n      const nearbyRenewables = renewables\n        .map(r => ({\n          type: r.type,\n          distance: calculateDistance(latitude, longitude, parseFloat(r.latitude), parseFloat(r.longitude)),\n          capacity: r.capacity || 100\n        }))\n        .filter(r => r.distance < 100)\n        .slice(0, 5);\n\n      const nearbyDemand = demandCenters\n        .map(d => ({\n          type: d.type,\n          distance: calculateDistance(latitude, longitude, parseFloat(d.latitude), parseFloat(d.longitude)),\n          level: d.demandLevel\n        }))\n        .filter(d => d.distance < 150)\n        .slice(0, 5);\n\n      // Calculate location-based suitability score using real factors\n      const analysis = calculateLocationSuitability(latitude, longitude, nearbyRenewables, nearbyDemand);\n      res.json(analysis);\n    } catch (error) {\n      console.error(\"Error analyzing site:\", error);\n      res.status(500).json({ message: \"Failed to analyze site\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Helper function to calculate distance between two coordinates\nfunction calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n  const R = 6371; // Radius of the Earth in kilometers\n  const dLat = deg2rad(lat2 - lat1);\n  const dLon = deg2rad(lon2 - lon1);\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  const d = R * c; // Distance in kilometers\n  return d;\n}\n\nfunction deg2rad(deg: number): number {\n  return deg * (Math.PI/180);\n}\n\n// Calculate location-based suitability score\nfunction calculateLocationSuitability(\n  latitude: number, \n  longitude: number, \n  nearbyRenewables: Array<{ type: string; distance: number; capacity: number }>,\n  nearbyDemand: Array<{ type: string; distance: number; level: string }>\n): any {\n  let score = 30; // Base score for any location in India\n  \n  // Renewable energy proximity bonus (0-30 points)\n  if (nearbyRenewables.length > 0) {\n    const closestRenewable = nearbyRenewables[0];\n    if (closestRenewable.distance < 10) score += 30;\n    else if (closestRenewable.distance < 25) score += 25;\n    else if (closestRenewable.distance < 50) score += 20;\n    else if (closestRenewable.distance < 100) score += 15;\n    else score += 10;\n    \n    // Bonus for high capacity renewable sources\n    const totalCapacity = nearbyRenewables.reduce((sum, r) => sum + r.capacity, 0);\n    if (totalCapacity > 1000) score += 8;\n    else if (totalCapacity > 500) score += 5;\n  }\n  \n  // Demand center proximity bonus (0-25 points)\n  if (nearbyDemand.length > 0) {\n    const highDemandNearby = nearbyDemand.filter(d => d.level === 'High' && d.distance < 100);\n    const mediumDemandNearby = nearbyDemand.filter(d => d.level === 'Medium' && d.distance < 150);\n    \n    score += highDemandNearby.length * 8;\n    score += mediumDemandNearby.length * 4;\n    \n    // Bonus for diverse demand types\n    const demandTypes = new Set(nearbyDemand.map(d => d.type));\n    score += demandTypes.size * 2;\n  }\n  \n  // Geographic bonus for optimal regions in India (0-15 points)\n  // Gujarat, Rajasthan, Maharashtra - high renewable potential\n  if ((latitude >= 20 && latitude <= 24 && longitude >= 68 && longitude <= 74) || // Gujarat\n      (latitude >= 24 && latitude <= 30 && longitude >= 69 && longitude <= 78) || // Rajasthan\n      (latitude >= 16 && latitude <= 21 && longitude >= 72 && longitude <= 80)) { // Maharashtra\n    score += 15;\n  }\n  // Tamil Nadu, Karnataka - coastal advantage\n  else if ((latitude >= 8 && latitude <= 15 && longitude >= 76 && longitude <= 82) || // Tamil Nadu/Karnataka\n           (latitude >= 11 && latitude <= 16 && longitude >= 74 && longitude <= 78)) { // Karnataka\n    score += 12;\n  }\n  // Other states with decent potential\n  else {\n    score += 8;\n  }\n  \n  // Cap score at 100\n  score = Math.min(100, score);\n  \n  // Calculate other metrics based on score\n  const renewableAccess = nearbyRenewables.length > 0 ? \n    Math.min(10, 10 - (nearbyRenewables[0].distance / 10)) : 3;\n  \n  const co2Savings = Math.floor(score * 2500 + Math.random() * 5000);\n  const industries = Math.floor(score / 10) + nearbyDemand.length;\n  const renewableUtil = Math.min(95, score + Math.floor(Math.random() * 10));\n  \n  return {\n    suitabilityScore: score,\n    factors: {\n      renewableAccess: Math.round(renewableAccess),\n      transportCost: nearbyDemand.length > 2 ? \"Low\" : nearbyDemand.length > 0 ? \"Medium\" : \"High\",\n      demandProximity: nearbyDemand.length > 1 ? \"Excellent\" : nearbyDemand.length > 0 ? \"Good\" : \"Fair\",\n      waterAvailability: latitude < 15 ? \"Excellent\" : latitude > 25 ? \"Good\" : \"Very Good\",\n      regulatorySupport: \"Strong\" // India has strong hydrogen policy support\n    },\n    recommendations: [\n      nearbyRenewables.length === 0 ? \"Consider renewable energy integration\" : \"Excellent renewable proximity\",\n      nearbyDemand.length === 0 ? \"Evaluate transport infrastructure\" : \"Good demand center access\",\n      \"Leverage India's National Green Hydrogen Mission incentives\"\n    ],\n    co2SavedAnnually: co2Savings,\n    industriesSupported: industries,\n    renewableUtilization: renewableUtil\n  };\n}\n","size_bytes":11852},"server/storage.ts":{"content":"import {\n  users,\n  hydrogenSites,\n  renewableSources,\n  demandCenters,\n  type User,\n  type UpsertUser,\n  type InsertHydrogenSite,\n  type HydrogenSite,\n  type RenewableSource,\n  type DemandCenter,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (IMPORTANT) these user operations are mandatory for Replit Auth.\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Hydrogen site operations\n  createHydrogenSite(site: InsertHydrogenSite): Promise<HydrogenSite>;\n  getHydrogenSites(userId: string): Promise<HydrogenSite[]>;\n  getAiSuggestedSites(): Promise<HydrogenSite[]>;\n  deleteHydrogenSite(id: string, userId: string): Promise<void>;\n  \n  // Infrastructure data operations\n  getRenewableSources(): Promise<RenewableSource[]>;\n  getDemandCenters(): Promise<DemandCenter[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (IMPORTANT) these user operations are mandatory for Replit Auth.\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Hydrogen site operations\n\n  async createHydrogenSite(site: InsertHydrogenSite): Promise<HydrogenSite> {\n    const [newSite] = await db\n      .insert(hydrogenSites)\n      .values(site)\n      .returning();\n    return newSite;\n  }\n\n  async getHydrogenSites(userId: string): Promise<HydrogenSite[]> {\n    return await db\n      .select()\n      .from(hydrogenSites)\n      .where(eq(hydrogenSites.userId, userId))\n      .orderBy(desc(hydrogenSites.createdAt));\n  }\n\n  async getAiSuggestedSites(): Promise<HydrogenSite[]> {\n    return await db\n      .select()\n      .from(hydrogenSites)\n      .where(eq(hydrogenSites.isAiSuggested, true))\n      .orderBy(desc(hydrogenSites.suitabilityScore));\n  }\n\n  async deleteHydrogenSite(id: string, userId: string): Promise<void> {\n    await db\n      .delete(hydrogenSites)\n      .where(and(eq(hydrogenSites.id, id), eq(hydrogenSites.userId, userId)));\n  }\n\n  // Infrastructure data operations\n\n  async getRenewableSources(): Promise<RenewableSource[]> {\n    return await db.select().from(renewableSources);\n  }\n\n  async getDemandCenters(): Promise<DemandCenter[]> {\n    return await db.select().from(demandCenters);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":2778},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Hydrogen plant sites table\nexport const hydrogenSites = pgTable(\"hydrogen_sites\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  name: varchar(\"name\").notNull(),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }).notNull(),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }).notNull(),\n  suitabilityScore: integer(\"suitability_score\").notNull(),\n  isAiSuggested: boolean(\"is_ai_suggested\").default(false),\n  co2SavedAnnually: integer(\"co2_saved_annually\"),\n  industriesSupported: integer(\"industries_supported\"),\n  renewableUtilization: integer(\"renewable_utilization\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Renewable energy sources table\nexport const renewableSources = pgTable(\"renewable_sources\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  type: varchar(\"type\").notNull(), // 'wind', 'solar', 'hydro'\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }).notNull(),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }).notNull(),\n  capacity: integer(\"capacity\"), // MW\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Demand centers table\nexport const demandCenters = pgTable(\"demand_centers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  type: varchar(\"type\").notNull(), // 'steel', 'transport', 'chemical', 'power'\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }).notNull(),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }).notNull(),\n  demandLevel: varchar(\"demand_level\").notNull(), // 'low', 'medium', 'high'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport const insertHydrogenSiteSchema = createInsertSchema(hydrogenSites).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRenewableSourceSchema = createInsertSchema(renewableSources).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDemandCenterSchema = createInsertSchema(demandCenters).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertHydrogenSite = z.infer<typeof insertHydrogenSiteSchema>;\nexport type HydrogenSite = typeof hydrogenSites.$inferSelect;\nexport type RenewableSource = typeof renewableSources.$inferSelect;\nexport type DemandCenter = typeof demandCenters.$inferSelect;\n","size_bytes":3618},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { SupabaseAuthProvider } from \"@/components/SupabaseAuthProvider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/Landing\";\nimport Home from \"@/pages/Home\";\nimport Calculator from \"@/pages/Calculator\";\nimport About from \"@/pages/About\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/calculator\" component={Calculator} />\n          <Route path=\"/about\" component={About} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <SupabaseAuthProvider>\n        <ThemeProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </ThemeProvider>\n      </SupabaseAuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1422},"client/src/index.css":{"content":"@import url('https://unpkg.com/leaflet@1.9.4/dist/leaflet.css');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Light theme colors matching design reference */\n  --background: hsl(0 0% 98%);\n  --foreground: hsl(240 10% 3.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(240 10% 3.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(240 10% 3.9%);\n  --primary: hsl(158 64% 52%);\n  --primary-foreground: hsl(0 0% 98%);\n  --secondary: hsl(199 89% 48%);\n  --secondary-foreground: hsl(0 0% 98%);\n  --muted: hsl(240 4.8% 95.9%);\n  --muted-foreground: hsl(240 3.8% 46.1%);\n  --accent: hsl(48 96% 53%);\n  --accent-foreground: hsl(240 5.9% 10%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(240 5.9% 90%);\n  --input: hsl(240 5.9% 90%);\n  --ring: hsl(158 64% 52%);\n  --chart-1: hsl(158 64% 52%);\n  --chart-2: hsl(48 96% 53%);\n  --chart-3: hsl(199 89% 48%);\n  --chart-4: hsl(142 76% 36%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(240 10% 3.9%);\n  --sidebar-primary: hsl(158 64% 52%);\n  --sidebar-primary-foreground: hsl(0 0% 98%);\n  --sidebar-accent: hsl(240 4.8% 95.9%);\n  --sidebar-accent-foreground: hsl(158 64% 52%);\n  --sidebar-border: hsl(240 5.9% 90%);\n  --sidebar-ring: hsl(158 64% 52%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(158 64% 52% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(158 64% 52% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(158 64% 52% / 0.00), 0px 1px 2px -1px hsl(158 64% 52% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(158 64% 52% / 0.00), 0px 1px 2px -1px hsl(158 64% 52% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(158 64% 52% / 0.00), 0px 2px 4px -1px hsl(158 64% 52% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(158 64% 52% / 0.00), 0px 4px 6px -1px hsl(158 64% 52% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(158 64% 52% / 0.00), 0px 8px 10px -1px hsl(158 64% 52% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(158 64% 52% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  /* Dark theme colors matching design reference */\n  --background: hsl(222 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(158 64% 52%);\n  --primary-foreground: hsl(222 84% 4.9%);\n  --secondary: hsl(217 32% 17%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217 32% 17%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(48 96% 53%);\n  --accent-foreground: hsl(222 84% 4.9%);\n  --destructive: hsl(0 62% 30%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217 32% 17%);\n  --input: hsl(217 32% 17%);\n  --ring: hsl(158 64% 52%);\n  --chart-1: hsl(158 64% 52%);\n  --chart-2: hsl(48 96% 53%);\n  --chart-3: hsl(199 89% 48%);\n  --chart-4: hsl(142 76% 36%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(222 84% 4.9%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(158 64% 52%);\n  --sidebar-primary-foreground: hsl(222 84% 4.9%);\n  --sidebar-accent: hsl(217 32% 17%);\n  --sidebar-accent-foreground: hsl(158 64% 52%);\n  --sidebar-border: hsl(217 32% 17%);\n  --sidebar-ring: hsl(158 64% 52%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(158 64% 52% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(158 64% 52% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(158 64% 52% / 0.00), 0px 1px 2px -1px hsl(158 64% 52% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(158 64% 52% / 0.00), 0px 1px 2px -1px hsl(158 64% 52% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(158 64% 52% / 0.00), 0px 2px 4px -1px hsl(158 64% 52% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(158 64% 52% / 0.00), 0px 4px 6px -1px hsl(158 64% 52% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(158 64% 52% / 0.00), 0px 8px 10px -1px hsl(158 64% 52% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(158 64% 52% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n/* Leaflet map container styles */\n.leaflet-container {\n  height: 100%;\n  width: 100%;\n  font-family: var(--font-sans);\n  z-index: 1 !important;\n}\n\n/* Ensure map pane stays behind UI elements */\n.leaflet-map-pane {\n  z-index: 1 !important;\n}\n\n/* Leaflet controls should be above map but below UI */\n.leaflet-control-container {\n  z-index: 100 !important;\n}\n\n/* Popups should be above map but below main UI */\n.leaflet-popup {\n  z-index: 600 !important;\n}\n\n/* Tooltips should be above popups */\n.leaflet-tooltip {\n  z-index: 650 !important;\n}\n\n/* AI glow animation for suggested sites */\n@keyframes pulse {\n  0%, 100% { \n    opacity: 1; \n    transform: scale(1);\n  }\n  50% { \n    opacity: 0.7; \n    transform: scale(1.1);\n  }\n}\n\n.ai-glow-marker {\n  animation: pulse 2s infinite;\n}\n\n/* Score color classes */\n.score-excellent { \n  color: hsl(142 76% 36%); \n}\n\n.score-good { \n  color: hsl(48 96% 53%); \n}\n\n.score-poor { \n  color: hsl(0 84% 60%); \n}\n\n/* Sidebar transition */\n.sidebar-transition {\n  transition: transform 0.3s ease-in-out;\n}\n\n/* Chat bubble styles */\n.chat-bubble {\n  max-width: 80%;\n}\n\n/* Custom marker styles */\n.hydrogen-plant-marker,\n.renewable-marker,\n.demand-marker {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* Map controls styling */\n.leaflet-control-zoom {\n  border: 1px solid hsl(var(--border)) !important;\n  border-radius: var(--radius) !important;\n  z-index: 100 !important;\n}\n\n/* Enhanced Map Drag and Drop Styles */\n.drag-marker-container {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: grab;\n}\n\n.drag-marker-container:active {\n  cursor: grabbing;\n}\n\n.drag-marker-pulse {\n  position: absolute;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background: hsl(158 64% 52% / 0.3);\n  animation: markerPulse 2s infinite;\n}\n\n.drag-marker-core {\n  width: 28px;\n  height: 28px;\n  border-radius: 50%;\n  background: hsl(158 64% 52%);\n  border: 3px solid white;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s ease;\n  z-index: 10;\n}\n\n.drag-marker-core:hover {\n  transform: scale(1.1);\n  box-shadow: 0 6px 16px rgba(0,0,0,0.4);\n}\n\n@keyframes markerPulse {\n  0% {\n    transform: scale(0.8);\n    opacity: 1;\n  }\n  70% {\n    transform: scale(1.3);\n    opacity: 0;\n  }\n  100% {\n    transform: scale(1.3);\n    opacity: 0;\n  }\n}\n\n/* Indian Map Theme */\n.leaflet-control-layers {\n  border-radius: 8px !important;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1) !important;\n}\n\n.renewable-marker {\n  filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2));\n}\n\n.demand-marker {\n  filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2));\n}\n\n/* Enhanced Auth Component Dark Mode Styling */\n.auth-container {\n  background: hsl(var(--card)) !important;\n  border: 1px solid hsl(var(--border)) !important;\n  border-radius: var(--radius) !important;\n}\n\n.auth-label-dark {\n  color: hsl(210 40% 98%) !important;\n  font-weight: 500 !important;\n}\n\n.auth-label-light {\n  color: hsl(222 84% 4.9%) !important;\n  font-weight: 500 !important;\n}\n\n.auth-message-dark {\n  color: hsl(210 40% 98%) !important;\n}\n\n.auth-message-light {\n  color: hsl(222 84% 4.9%) !important;\n}\n\n.auth-button {\n  border-radius: var(--radius) !important;\n  font-weight: 500 !important;\n  transition: all 0.2s ease !important;\n}\n\n.auth-input {\n  border-radius: var(--radius) !important;\n  border: 1px solid hsl(var(--border)) !important;\n  font-weight: 400 !important;\n}\n\n/* Override Supabase Auth UI default styles for better dark mode */\n.supabase-auth-ui_ui-container .supabase-auth-ui_ui-label {\n  color: hsl(var(--foreground)) !important;\n}\n\n.supabase-auth-ui_ui-container .supabase-auth-ui_ui-message {\n  color: hsl(var(--foreground)) !important;\n}\n\n.supabase-auth-ui_ui-container .supabase-auth-ui_ui-input {\n  background-color: hsl(var(--input)) !important;\n  border-color: hsl(var(--border)) !important;\n  color: hsl(var(--foreground)) !important;\n}\n\n.supabase-auth-ui_ui-container .supabase-auth-ui_ui-input::placeholder {\n  color: hsl(var(--muted-foreground)) !important;\n}\n\n.leaflet-control-zoom a {\n  background-color: hsl(var(--card)) !important;\n  color: hsl(var(--foreground)) !important;\n  border: none !important;\n}\n\n.leaflet-control-zoom a:hover {\n  background-color: hsl(var(--muted)) !important;\n}\n\n/* Popup styling with proper z-index */\n.leaflet-popup-pane {\n  z-index: 1000 !important;\n}\n\n.leaflet-popup-content-wrapper {\n  background-color: hsl(var(--card)) !important;\n  color: hsl(var(--foreground)) !important;\n  border-radius: var(--radius) !important;\n  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1) !important;\n  z-index: 1001 !important;\n}\n\n.leaflet-popup-tip {\n  background-color: hsl(var(--card)) !important;\n  z-index: 1001 !important;\n}\n\n/* Tooltip and marker z-index fixes */\n.leaflet-tooltip-pane {\n  z-index: 1002 !important;\n}\n\n.leaflet-marker-pane {\n  z-index: 600 !important;\n}\n\n.leaflet-overlay-pane {\n  z-index: 400 !important;\n}\n\n/* Ensure drag markers appear on top */\n.hydrogen-plant-marker {\n  z-index: 1000 !important;\n  position: relative !important;\n}\n\n/* Chart container styling */\ncanvas {\n  max-height: 100%;\n  max-width: 100%;\n}\n\n/* Focus and accessibility improvements */\nbutton:focus-visible,\ninput:focus-visible,\n[role=\"button\"]:focus-visible {\n  outline: 2px solid hsl(var(--ring));\n  outline-offset: 2px;\n}\n\n/* Ensure proper contrast for interactive elements */\nbutton[disabled] {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n/* Loading states */\n.animate-pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Custom scrollbar for dark/light themes */\n::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground));\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--foreground));\n}\n","size_bytes":10261},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Chatbot.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { X, Bot, User, Send } from \"lucide-react\";\n\ninterface ChatMessage {\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n}\n\ninterface ChatbotProps {\n  onClose: () => void;\n}\n\nexport default function Chatbot({ onClose }: ChatbotProps) {\n  const [messages, setMessages] = useState<ChatMessage[]>([\n    {\n      role: 'assistant',\n      content: \"Hi! I'm your InfraVision assistant. I can help you find optimal hydrogen plant locations, explain suitability scores, and answer questions about green hydrogen infrastructure. What would you like to know?\",\n      timestamp: new Date()\n    }\n  ]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const chatMutation = useMutation({\n    mutationFn: async (userMessage: string) => {\n      const messagesToSend = [\n        ...messages.filter(m => m.role !== 'assistant' || m.content !== messages[0].content), // Exclude welcome message\n        { role: 'user' as const, content: userMessage }\n      ];\n      \n      const response = await apiRequest('POST', '/api/chat', { messages: messagesToSend });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setMessages(prev => [\n        ...prev,\n        {\n          role: 'assistant',\n          content: data.response,\n          timestamp: new Date()\n        }\n      ]);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to get response from assistant. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!inputValue.trim() || chatMutation.isPending) return;\n\n    const userMessage = inputValue.trim();\n    setInputValue(\"\");\n\n    // Add user message immediately\n    setMessages(prev => [\n      ...prev,\n      {\n        role: 'user',\n        content: userMessage,\n        timestamp: new Date()\n      }\n    ]);\n\n    // Send to API\n    chatMutation.mutate(userMessage);\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString('en-US', { \n      hour: '2-digit', \n      minute: '2-digit',\n      hour12: false \n    });\n  };\n\n  return (\n    <Card className=\"fixed bottom-4 right-4 w-80 md:w-96 h-96 md:h-[500px] bg-card border border-border shadow-xl overflow-hidden z-[1000]\">\n      <CardHeader className=\"p-4 border-b border-border bg-primary text-primary-foreground\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Bot className=\"w-4 h-4\" />\n            <span className=\"font-medium\">InfraVision Assistant</span>\n          </div>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onClose}\n            className=\"w-6 h-6 text-primary-foreground/80 hover:text-primary-foreground hover:bg-primary-foreground/10\"\n            data-testid=\"button-close-chat\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-0 flex flex-col h-[calc(100%-4rem)]\">\n        {/* Messages */}\n        <div className=\"flex-1 p-4 overflow-y-auto space-y-3\" data-testid=\"chat-messages\">\n          {messages.map((message, index) => (\n            <div key={index} className=\"flex items-start space-x-2\">\n              <div className={`w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 ${\n                message.role === 'assistant' ? 'bg-primary' : 'bg-muted'\n              }`}>\n                {message.role === 'assistant' ? (\n                  <Bot className=\"w-3 h-3 text-primary-foreground\" />\n                ) : (\n                  <User className=\"w-3 h-3 text-muted-foreground\" />\n                )}\n              </div>\n              <div className={`max-w-[80%] rounded-lg px-3 py-2 ${\n                message.role === 'assistant' \n                  ? 'bg-muted text-foreground' \n                  : 'bg-primary text-primary-foreground'\n              }`}>\n                <p className=\"text-sm\">{message.content}</p>\n                <div className=\"text-xs opacity-70 mt-1\">\n                  {formatTime(message.timestamp)}\n                </div>\n              </div>\n            </div>\n          ))}\n          \n          {chatMutation.isPending && (\n            <div className=\"flex items-start space-x-2\">\n              <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                <Bot className=\"w-3 h-3 text-primary-foreground\" />\n              </div>\n              <div className=\"bg-muted rounded-lg px-3 py-2\">\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-muted-foreground/50 rounded-full animate-pulse\"></div>\n                  <div className=\"w-2 h-2 bg-muted-foreground/50 rounded-full animate-pulse\" style={{ animationDelay: '0.2s' }}></div>\n                  <div className=\"w-2 h-2 bg-muted-foreground/50 rounded-full animate-pulse\" style={{ animationDelay: '0.4s' }}></div>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          <div ref={messagesEndRef} />\n        </div>\n        \n        {/* Input */}\n        <div className=\"p-4 border-t border-border\">\n          <form onSubmit={handleSubmit} className=\"flex space-x-2\">\n            <Input\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              placeholder=\"Ask about hydrogen infrastructure...\"\n              className=\"flex-1 text-sm\"\n              disabled={chatMutation.isPending}\n              data-testid=\"input-chat-message\"\n            />\n            <Button \n              type=\"submit\" \n              size=\"icon\"\n              disabled={!inputValue.trim() || chatMutation.isPending}\n              data-testid=\"button-send-message\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </Button>\n          </form>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6992},"client/src/components/Header.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useSupabaseAuth } from \"@/components/SupabaseAuthProvider\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport HelpForm from \"@/components/HelpForm\";\nimport { Leaf, Sun, Moon, MessageSquare, ChevronDown, User, Settings, LogOut, HelpCircle, Info } from \"lucide-react\";\n\ninterface HeaderProps {\n  onChatToggle: () => void;\n}\n\nexport default function Header({ onChatToggle }: HeaderProps) {\n  const { user } = useAuth();\n  const { signOut } = useSupabaseAuth();\n  const { theme, toggleTheme } = useTheme();\n  const [showHelpForm, setShowHelpForm] = useState(false);\n\n  const handleLogout = async () => {\n    await signOut();\n  };\n\n  const handleHelpClick = () => {\n    setShowHelpForm(true);\n  };\n\n\n  return (\n    <header className=\"bg-card border-b border-border shadow-sm sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <Leaf className=\"w-4 h-4 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-bold text-foreground\">InfraVision</h1>\n              <p className=\"text-xs text-muted-foreground\">Green Hydrogen Planning</p>\n            </div>\n          </div>\n          \n          {/* Navigation */}\n          <div className=\"flex items-center space-x-4\">\n            \n            <nav className=\"hidden md:flex items-center space-x-6\">\n              <Link href=\"/about\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"gap-2\">\n                  <Info className=\"w-4 h-4\" />\n                  About\n                </Button>\n              </Link>\n\n              <button \n                onClick={handleHelpClick}\n                className=\"text-muted-foreground hover:text-primary transition-colors\"\n                data-testid=\"button-help-nav\"\n              >\n                Help\n              </button>\n            </nav>\n          </div>\n          \n          {/* Actions */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Theme Toggle */}\n            <button \n              onClick={toggleTheme}\n              className=\"p-2 rounded-md hover:bg-muted transition-colors\"\n              data-testid=\"button-theme-toggle\"\n            >\n              {theme === \"light\" ? (\n                <Moon className=\"w-4 h-4 text-accent\" />\n              ) : (\n                <Sun className=\"w-4 h-4 text-accent\" />\n              )}\n            </button>\n            \n            {/* Chatbot Toggle */}\n            <button \n              onClick={onChatToggle}\n              className=\"p-2 rounded-md hover:bg-muted transition-colors relative\"\n              data-testid=\"button-chat-toggle\"\n            >\n              <MessageSquare className=\"w-4 h-4 text-primary\" />\n              <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-accent rounded-full\"></span>\n            </button>\n            \n            {/* Enhanced User Menu with Dropdown */}\n            {user && (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"flex items-center space-x-2 px-3\" data-testid=\"button-user-menu\">\n                    {user.user_metadata?.avatar_url && (\n                      <img \n                        src={user.user_metadata.avatar_url} \n                        alt=\"User avatar\" \n                        className=\"w-8 h-8 rounded-full object-cover\" \n                        data-testid=\"img-user-avatar\"\n                      />\n                    )}\n                    <div className=\"hidden sm:block text-left\">\n                      <div className=\"text-sm font-medium\" data-testid=\"text-username\">\n                        {user.user_metadata?.username || user.user_metadata?.full_name || user.user_metadata?.name || 'User'}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground truncate max-w-[120px]\" data-testid=\"text-user-email\">\n                        {user.email}\n                      </div>\n                    </div>\n                    <ChevronDown className=\"w-4 h-4 text-muted-foreground\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56\">\n                  <DropdownMenuLabel>\n                    <div className=\"flex items-center space-x-2\">\n                      {user.user_metadata?.avatar_url && (\n                        <img \n                          src={user.user_metadata.avatar_url} \n                          alt=\"User avatar\" \n                          className=\"w-6 h-6 rounded-full object-cover\" \n                        />\n                      )}\n                      <div>\n                        <div className=\"font-medium text-sm\">\n                          {user.user_metadata?.username || user.user_metadata?.full_name || user.user_metadata?.name || 'User'}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {user.email}\n                        </div>\n                      </div>\n                    </div>\n                  </DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem className=\"cursor-pointer\" data-testid=\"menu-profile\">\n                    <User className=\"w-4 h-4 mr-2\" />\n                    Profile\n                  </DropdownMenuItem>\n                  <DropdownMenuItem className=\"cursor-pointer\" data-testid=\"menu-settings\">\n                    <Settings className=\"w-4 h-4 mr-2\" />\n                    Settings\n                  </DropdownMenuItem>\n                  <DropdownMenuItem className=\"cursor-pointer\" onClick={handleHelpClick} data-testid=\"menu-help\">\n                    <HelpCircle className=\"w-4 h-4 mr-2\" />\n                    Help & Support\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem \n                    className=\"cursor-pointer text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-950\" \n                    onClick={handleLogout}\n                    data-testid=\"menu-logout\"\n                  >\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Sign out\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {/* Help Form Modal */}\n      {showHelpForm && (\n        <HelpForm onClose={() => setShowHelpForm(false)} />\n      )}\n    </header>\n  );\n}\n","size_bytes":7133},"client/src/components/ImpactPanel.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, Leaf, Factory, Zap } from \"lucide-react\";\nimport type { HydrogenSite } from \"@/types/hydrogen\";\n\ninterface ImpactPanelProps {\n  site: HydrogenSite;\n  onClose: () => void;\n}\n\nexport default function ImpactPanel({ site, onClose }: ImpactPanelProps) {\n  const chartRef = useRef<HTMLCanvasElement>(null);\n  const chartInstanceRef = useRef<any>(null);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    // Import Chart.js dynamically\n    import('chart.js/auto').then((Chart) => {\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.destroy();\n      }\n\n      const ctx = chartRef.current;\n      if (!ctx) return;\n\n      chartInstanceRef.current = new Chart.default(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Wind Energy', 'Solar Energy', 'Grid Power'],\n          datasets: [{\n            data: [\n              site.renewableUtilization ? Math.floor(site.renewableUtilization * 0.65) : 45,\n              site.renewableUtilization ? Math.floor(site.renewableUtilization * 0.35) : 25,\n              site.renewableUtilization ? 100 - site.renewableUtilization : 30\n            ],\n            backgroundColor: [\n              'hsl(158 64% 52%)',\n              'hsl(48 96% 53%)',\n              'hsl(240 5.9% 90%)'\n            ],\n            borderWidth: 0\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: true,\n          plugins: {\n            legend: {\n              position: 'bottom',\n              labels: {\n                usePointStyle: true,\n                boxWidth: 6,\n                font: {\n                  size: 10\n                }\n              }\n            }\n          }\n        }\n      });\n    });\n\n    return () => {\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.destroy();\n      }\n    };\n  }, [site]);\n\n  return (\n    <Card className=\"absolute bottom-4 right-4 w-96 bg-card border border-border shadow-lg overflow-hidden z-[1000]\">\n      <CardHeader className=\"pb-3 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"font-semibold text-foreground\">Sustainability Impact</h3>\n            <p className=\"text-sm text-muted-foreground mt-1\" data-testid=\"text-site-name\">\n              {site.name}\n            </p>\n          </div>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onClose}\n            className=\"w-6 h-6\"\n            data-testid=\"button-close-impact-panel\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-4 space-y-4\">\n        {/* CO2 Savings */}\n        <div className=\"bg-muted rounded-lg p-3\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium text-foreground\">CO₂ Saved Annually</span>\n            <Leaf className=\"w-4 h-4 text-primary\" />\n          </div>\n          <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-co2-annual\">\n            {site.co2SavedAnnually ? (site.co2SavedAnnually / 1000).toFixed(0) : '25'}k\n          </div>\n          <div className=\"text-xs text-muted-foreground\">tons per year</div>\n        </div>\n        \n        {/* Industries Supported */}\n        <div className=\"bg-muted rounded-lg p-3\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium text-foreground\">Industries Supported</span>\n            <Factory className=\"w-4 h-4 text-secondary\" />\n          </div>\n          <div className=\"text-2xl font-bold text-secondary\" data-testid=\"text-industries-count\">\n            {site.industriesSupported || 8}\n          </div>\n          <div className=\"text-xs text-muted-foreground\">steel, transport, chemical</div>\n        </div>\n        \n        {/* Renewable Utilization */}\n        <div className=\"bg-muted rounded-lg p-3\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium text-foreground\">Renewable Utilization</span>\n            <Zap className=\"w-4 h-4 text-accent\" />\n          </div>\n          <div className=\"text-2xl font-bold text-accent\" data-testid=\"text-renewable-percent\">\n            {site.renewableUtilization || 75}%\n          </div>\n          <div className=\"text-xs text-muted-foreground\">wind + solar mix</div>\n        </div>\n        \n        {/* Chart Container */}\n        <div className=\"h-48 bg-muted rounded-lg p-3\">\n          <canvas ref={chartRef} data-testid=\"chart-energy-mix\"></canvas>\n        </div>\n\n        {/* Additional Metrics */}\n        <div className=\"grid grid-cols-2 gap-3 pt-2 border-t border-border\">\n          <div className=\"text-center\">\n            <div className=\"text-lg font-bold text-foreground\" data-testid=\"text-suitability-score\">\n              {site.suitabilityScore}/100\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Suitability Score</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-lg font-bold text-foreground\" data-testid=\"text-economic-impact\">\n              $2.5M\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Economic Impact</div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5570},"client/src/components/MapView.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Menu, X, TrendingUp, Download, Share2 } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { HydrogenSite, RenewableSource, DemandCenter, SiteAnalysis } from \"@/types/hydrogen\";\nimport SiteAnalysisPanel from \"./SiteAnalysisPanel\";\nimport html2canvas from \"html2canvas\";\n\n// Import Leaflet statically\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\ninterface MapViewProps {\n  onSiteSelect: (site: HydrogenSite) => void;\n  onScoreUpdate: (analysis: SiteAnalysis) => void;\n  sidebarOpen: boolean;\n  onSidebarToggle: () => void;\n  enabledLayers: { [key: string]: boolean };\n  onMapReady: (map: any) => void;\n}\n\nexport default function MapView({ onSiteSelect, onScoreUpdate, sidebarOpen, onSidebarToggle, enabledLayers, onMapReady }: MapViewProps) {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const mapInstanceRef = useRef<any>(null);\n  const dragMarkerRef = useRef<any>(null);\n  const layerGroupsRef = useRef<{ [key: string]: any }>({});\n  const { toast } = useToast();\n  const { isAuthenticated } = useAuth();\n  const queryClient = useQueryClient();\n\n  // State for analytics panel\n  const [currentAnalysis, setCurrentAnalysis] = useState<SiteAnalysis | null>(null);\n  const [showAnalytics, setShowAnalytics] = useState(false);\n  const [isExporting, setIsExporting] = useState(false);\n\n  // Fetch hydrogen sites\n  const { data: hydrogenSites = [] } = useQuery<HydrogenSite[]>({\n    queryKey: ['/api/hydrogen-sites'],\n    enabled: isAuthenticated,\n    refetchOnWindowFocus: false,\n  });\n\n  // Fetch AI suggestions\n  const { data: aiSuggestions = [] } = useQuery<HydrogenSite[]>({\n    queryKey: ['/api/ai-suggestions'],\n    refetchOnWindowFocus: false,\n  });\n\n  // Fetch renewable sources\n  const { data: renewableSources = [] } = useQuery<RenewableSource[]>({\n    queryKey: ['/api/renewable-sources'],\n    refetchOnWindowFocus: false,\n  });\n\n  // Fetch demand centers\n  const { data: demandCenters = [] } = useQuery<DemandCenter[]>({\n    queryKey: ['/api/demand-centers'],\n    refetchOnWindowFocus: false,\n  });\n\n  // Create hydrogen site mutation\n  const createSiteMutation = useMutation({\n    mutationFn: async (siteData: { name: string; latitude: string; longitude: string }) => {\n      return await apiRequest('POST', '/api/hydrogen-sites', siteData);\n    },\n    onSuccess: async (response) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/hydrogen-sites'] });\n      const data = await response.json();\n      if (data.analysis) {\n        onScoreUpdate(data.analysis);\n        setCurrentAnalysis(data.analysis);\n        setShowAnalytics(true);\n      }\n      toast({\n        title: \"Site Created\",\n        description: \"Hydrogen plant site has been added successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create hydrogen site. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Analyze site mutation\n  const analyzeSiteMutation = useMutation({\n    mutationFn: async ({ latitude, longitude }: { latitude: number; longitude: number }) => {\n      const response = await apiRequest('POST', '/api/analyze-site', { latitude, longitude });\n      return await response.json();\n    },\n    onSuccess: (analysis: SiteAnalysis) => {\n      onScoreUpdate(analysis);\n      setCurrentAnalysis(analysis);\n      setShowAnalytics(true);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      console.error(\"Site analysis error:\", error);\n    },\n  });\n\n  useEffect(() => {\n    if (!mapRef.current || mapInstanceRef.current) return;\n\n    // Initialize map centered on India\n    const map = L.map(mapRef.current).setView([20.5937, 78.9629], 5);\n\n    // Add OpenStreetMap tiles with India focus\n    const osmLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors',\n      minZoom: 4,\n      maxZoom: 18\n    }).addTo(map);\n\n    // Add multiple map layer options\n    const satelliteLayer = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n      attribution: '© Esri'\n    });\n\n    const terrainLayer = L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenTopoMap'\n    });\n\n    const darkLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '© CartoDB'\n    });\n\n    // Create layer groups for different data types\n    const renewableLayerGroup = L.layerGroup();\n    const demandLayerGroup = L.layerGroup();\n    const hydrogenLayerGroup = L.layerGroup();\n    const aiSuggestionsLayerGroup = L.layerGroup();\n\n    // Store layer groups for management\n    layerGroupsRef.current = {\n      renewable: renewableLayerGroup,\n      demand: demandLayerGroup,\n      hydrogen: hydrogenLayerGroup,\n      aiSuggestions: aiSuggestionsLayerGroup\n    };\n\n    // Add layer groups based on enabled state\n    if (enabledLayers.renewable) renewableLayerGroup.addTo(map);\n    if (enabledLayers.demand) demandLayerGroup.addTo(map);\n    if (enabledLayers.hydrogen) hydrogenLayerGroup.addTo(map);\n    if (enabledLayers.aiSuggestions) aiSuggestionsLayerGroup.addTo(map);\n\n    const baseLayers = {\n      \"Street Map\": osmLayer,\n      \"Satellite\": satelliteLayer,\n      \"Terrain\": terrainLayer,\n      \"Dark Mode\": darkLayer\n    };\n\n    // Create pipeline network layer (simulated major industrial corridors)\n    const pipelineLayerGroup = L.layerGroup();\n    const majorPipelines = [\n      // Delhi-Mumbai Industrial Corridor\n      [[28.6139, 77.2090], [19.0760, 72.8777]],\n      // Chennai-Bangalore Corridor\n      [[13.0827, 80.2707], [12.9716, 77.5946]],\n      // Kolkata-Delhi Corridor\n      [[22.5726, 88.3639], [28.6139, 77.2090]],\n      // Gujarat-Rajasthan Corridor\n      [[23.0225, 72.5714], [26.9124, 75.7873]]\n    ];\n\n    majorPipelines.forEach((pipeline, index) => {\n      const polyline = L.polyline(pipeline as [number, number][], {\n        color: '#9333ea',\n        weight: 3,\n        opacity: 0.7,\n        dashArray: '10, 10'\n      }).addTo(pipelineLayerGroup);\n      \n      polyline.bindPopup(`Pipeline Corridor ${index + 1}<br/>Planned H₂ Infrastructure`);\n    });\n\n    // Create regulatory zones layer (key policy zones)\n    const regulatoryLayerGroup = L.layerGroup();\n    const policyZones = [\n      { name: \"Gujarat Green Hydrogen Hub\", lat: 23.0225, lng: 72.5714, radius: 80000 },\n      { name: \"Rajasthan Renewable Zone\", lat: 26.9124, lng: 75.7873, radius: 70000 },\n      { name: \"Ladakh Solar Zone\", lat: 34.1526, lng: 77.5771, radius: 50000 },\n      { name: \"Tamil Nadu Wind Corridor\", lat: 11.1271, lng: 78.6569, radius: 60000 }\n    ];\n\n    policyZones.forEach(zone => {\n      const circle = L.circle([zone.lat, zone.lng], {\n        color: '#f59e0b',\n        fillColor: '#fbbf24',\n        fillOpacity: 0.1,\n        radius: zone.radius,\n        weight: 2\n      }).addTo(regulatoryLayerGroup);\n      \n      circle.bindPopup(`<strong>${zone.name}</strong><br/>Special Economic Zone<br/>Enhanced Policy Support`);\n    });\n\n    const overlayLayers = {\n      \"Existing H₂ Plants\": hydrogenLayerGroup,\n      \"Renewable Sources\": renewableLayerGroup,\n      \"Demand Centers\": demandLayerGroup,\n      \"Pipeline Network\": pipelineLayerGroup,\n      \"Regulatory Zones\": regulatoryLayerGroup,\n      \"AI Suggested Sites\": aiSuggestionsLayerGroup\n    };\n\n    L.control.layers(baseLayers, overlayLayers, {\n      position: 'topright',\n      collapsed: false\n    }).addTo(map);\n\n    mapInstanceRef.current = map;\n    onMapReady(map);\n\n    // Map click handler for creating new sites\n    map.on('click', (e: any) => {\n      const { lat, lng } = e.latlng;\n\n      // Remove existing drag marker\n      if (dragMarkerRef.current) {\n        map.removeLayer(dragMarkerRef.current);\n      }\n\n      // Create new draggable marker\n      const marker = L.marker([lat, lng], {\n        draggable: true,\n        icon: L.divIcon({\n          html: `<div style=\"background: hsl(158 64% 52%); width: 24px; height: 24px; border-radius: 50%; border: 3px solid white; box-shadow: 0 2px 8px rgba(0,0,0,0.3); display: flex; align-items: center; justify-content: center;\">\n            <i class=\"fas fa-industry\" style=\"color: white; font-size: 10px;\"></i>\n          </div>`,\n          iconSize: [24, 24],\n          className: 'hydrogen-plant-marker'\n        })\n      }).addTo(map);\n\n      dragMarkerRef.current = marker;\n\n      // Analyze site on placement\n      analyzeSiteMutation.mutate({ latitude: lat, longitude: lng });\n\n      marker.on('dragend', (dragEvent: any) => {\n        const newPos = dragEvent.target.getLatLng();\n        analyzeSiteMutation.mutate({ latitude: newPos.lat, longitude: newPos.lng });\n      });\n\n      // Double-click to create permanent site with Indian naming\n      marker.on('dblclick', () => {\n        const position = marker.getLatLng();\n\n        // Generate Indian-style site names based on geographical location\n        const getIndianLocationName = (lat: number, lng: number) => {\n          // Rough geographical divisions for India\n          if (lat > 30) return 'Punjab'; // Northern regions\n          if (lat > 26 && lng < 77) return 'Rajasthan'; // Western desert\n          if (lat > 23 && lng > 82) return 'West Bengal'; // Eastern regions\n          if (lat < 15 && lng > 77) return 'Tamil Nadu'; // Southern regions\n          if (lat < 20 && lng < 75) return 'Karnataka'; // South-western\n          if (lng < 73) return 'Gujarat'; // Western coast\n          if (lng > 80) return 'Odisha'; // Eastern coast\n          return 'Maharashtra'; // Central regions\n        };\n\n        const stateName = getIndianLocationName(position.lat, position.lng);\n        const siteName = `${stateName} Green H2 Hub ${Math.floor(Math.random() * 100 + 1)}`;\n\n        createSiteMutation.mutate({\n          name: siteName,\n          latitude: position.lat.toString(),\n          longitude: position.lng.toString()\n        });\n\n        map.removeLayer(marker);\n        dragMarkerRef.current = null;\n      });\n    });\n\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n    };\n  }, []);\n\n  // Add markers for existing hydrogen sites\n  useEffect(() => {\n    if (!mapInstanceRef.current) return;\n\n    const map = mapInstanceRef.current;\n\n    // Clear existing markers (except drag marker)\n    map.eachLayer((layer: any) => {\n      if (layer.options && layer.options.isHydrogenSite) {\n        map.removeLayer(layer);\n      }\n    });\n\n    // Add user hydrogen sites to layer group\n    hydrogenSites.forEach((site) => {\n      const marker = L.marker([parseFloat(site.latitude), parseFloat(site.longitude)], {\n        icon: L.divIcon({\n          html: `<div style=\"background: hsl(203 88% 53%); width: 20px; height: 20px; border-radius: 50%; border: 2px solid white; box-shadow: 0 2px 6px rgba(0,0,0,0.2);\"></div>`,\n          iconSize: [20, 20]\n        })\n      }).addTo(layerGroupsRef.current.hydrogen);\n      \n      (marker as any).isHydrogenSite = true;\n\n      marker.bindPopup(`\n        <div style=\"padding: 12px; min-width: 200px;\">\n          <h3 style=\"margin: 0 0 6px 0; font-weight: 600; color: #1a1a1a;\">${site.name}</h3>\n          <div style=\"margin: 0 0 6px 0; display: flex; align-items: center; gap: 6px;\">\n            <span style=\"width: 8px; height: 8px; background: hsl(203 88% 53%); border-radius: 50%;\"></span>\n            <span style=\"font-size: 12px; color: #666;\">User Created Site</span>\n          </div>\n          <div style=\"margin: 0 0 6px 0; padding: 4px 8px; background: #f0f9ff; border-radius: 4px; border-left: 3px solid hsl(203 88% 53%);\">\n            <span style=\"font-size: 12px; font-weight: 600;\">Suitability Score: ${site.suitabilityScore}/100</span>\n          </div>\n          <div style=\"font-size: 11px; color: #888; border-top: 1px solid #eee; padding-top: 6px; margin-top: 6px;\">\n            📍 ${parseFloat(site.latitude).toFixed(4)}, ${parseFloat(site.longitude).toFixed(4)}\n          </div>\n        </div>\n      `);\n\n      marker.on('click', () => onSiteSelect(site));\n    });\n\n    // Add AI suggested sites to layer group with glow effect\n    aiSuggestions.forEach((site) => {\n      const marker = L.marker([parseFloat(site.latitude), parseFloat(site.longitude)], {\n        icon: L.divIcon({\n          className: 'ai-glow-marker',\n          html: `<div style=\"background: hsl(158 64% 52%); width: 20px; height: 20px; border-radius: 50%; border: 3px solid white; box-shadow: 0 0 15px hsl(158 64% 52%), 0 2px 6px rgba(0,0,0,0.2); animation: pulse 2s infinite;\"></div>`,\n          iconSize: [20, 20]\n        })\n      }).addTo(layerGroupsRef.current.aiSuggestions);\n      \n      (marker as any).isHydrogenSite = true;\n\n      marker.bindPopup(`\n        <div style=\"padding: 12px; min-width: 200px;\">\n          <h3 style=\"margin: 0 0 6px 0; font-weight: 600; color: #1a1a1a;\">${site.name}</h3>\n          <div style=\"margin: 0 0 6px 0; display: flex; align-items: center; gap: 6px;\">\n            <span style=\"width: 8px; height: 8px; background: hsl(158 64% 52%); border-radius: 50%; box-shadow: 0 0 6px hsl(158 64% 52%);\"></span>\n            <span style=\"font-size: 12px; color: #10b981; font-weight: 500;\">AI Recommended Site</span>\n          </div>\n          <div style=\"margin: 0 0 6px 0; padding: 4px 8px; background: #f0fdf4; border-radius: 4px; border-left: 3px solid hsl(158 64% 52%);\">\n            <span style=\"font-size: 12px; font-weight: 600;\">Suitability Score: ${site.suitabilityScore}/100</span>\n          </div>\n          <div style=\"font-size: 11px; color: #888; border-top: 1px solid #eee; padding-top: 6px; margin-top: 6px;\">\n            🤖 AI Analysis • 📍 ${parseFloat(site.latitude).toFixed(4)}, ${parseFloat(site.longitude).toFixed(4)}\n          </div>\n        </div>\n      `);\n\n      marker.on('click', () => onSiteSelect(site));\n    });\n  }, [hydrogenSites, aiSuggestions, onSiteSelect]);\n\n  // Add renewable energy sources\n  useEffect(() => {\n    if (!mapInstanceRef.current) return;\n\n    const map = mapInstanceRef.current;\n\n    // Clear existing renewable markers\n    map.eachLayer((layer: any) => {\n      if (layer.options && layer.options.isRenewableSource) {\n        map.removeLayer(layer);\n      }\n    });\n\n    renewableSources.forEach((source) => {\n      const getIconAndColor = (type: string) => {\n        if (type.toLowerCase().includes('wind')) return { icon: '🌪️', color: '#10b981' };\n        if (type.toLowerCase().includes('solar')) return { icon: '☀️', color: '#f59e0b' };\n        return { icon: '⚡', color: '#3b82f6' };\n      };\n      \n      const { icon, color } = getIconAndColor(source.type);\n\n      const marker = L.marker([parseFloat(source.latitude), parseFloat(source.longitude)], {\n        icon: L.divIcon({\n          html: `<div style=\"font-size: 16px; text-shadow: 1px 1px 2px rgba(0,0,0,0.5);\">${icon}</div>`,\n          iconSize: [20, 20],\n          className: 'renewable-marker'\n        })\n      }).addTo(layerGroupsRef.current.renewable);\n      \n      (marker as any).isRenewableSource = true;\n\n      marker.bindPopup(`\n        <div style=\"padding: 8px;\">\n          <h3 style=\"margin: 0 0 4px 0; font-weight: 600;\">${source.name}</h3>\n          <p style=\"margin: 0; font-size: 12px; color: ${color};\">${source.type.charAt(0).toUpperCase() + source.type.slice(1)} Energy</p>\n          ${source.capacity ? `<p style=\"margin: 4px 0 0 0; font-size: 12px;\">Capacity: ${source.capacity}MW</p>` : ''}\n        </div>\n      `);\n    });\n  }, [renewableSources]);\n\n  // Add demand centers\n  useEffect(() => {\n    if (!mapInstanceRef.current) return;\n\n    const map = mapInstanceRef.current;\n\n    // Clear existing demand markers\n    map.eachLayer((layer: any) => {\n      if (layer.options && layer.options.isDemandCenter) {\n        map.removeLayer(layer);\n      }\n    });\n\n    demandCenters.forEach((center) => {\n      const getIconAndColor = (type: string, level: string) => {\n        const icons = {\n          'steel': '🏭',\n          'transport': '🚛',\n          'chemical': '🧪',\n          'refinery': '🛢️',\n          'port': '🚢'\n        };\n        const colors = {\n          'High': '#ef4444',\n          'Medium': '#f59e0b',\n          'Low': '#10b981'\n        };\n        return {\n          icon: icons[type.toLowerCase().split(' ')[0] as keyof typeof icons] || '🏢',\n          color: colors[level as keyof typeof colors] || '#6b7280'\n        };\n      };\n      \n      const { icon, color } = getIconAndColor(center.type, center.demandLevel);\n\n      const marker = L.marker([parseFloat(center.latitude), parseFloat(center.longitude)], {\n        icon: L.divIcon({\n          html: `<div style=\"font-size: 14px; text-shadow: 1px 1px 2px rgba(0,0,0,0.5);\">${icon}</div>`,\n          iconSize: [18, 18],\n          className: 'demand-marker'\n        })\n      }).addTo(layerGroupsRef.current.demand);\n      \n      (marker as any).isDemandCenter = true;\n\n      marker.bindPopup(`\n        <div style=\"padding: 8px;\">\n          <h3 style=\"margin: 0 0 4px 0; font-weight: 600;\">${center.name}</h3>\n          <p style=\"margin: 0; font-size: 12px; color: ${color};\">${center.type.charAt(0).toUpperCase() + center.type.slice(1)} Industry</p>\n          <p style=\"margin: 4px 0 0 0; font-size: 12px;\">Demand: ${center.demandLevel.charAt(0).toUpperCase() + center.demandLevel.slice(1)}</p>\n        </div>\n      `);\n    });\n  }, [demandCenters]);\n\n  // Handle layer visibility changes\n  useEffect(() => {\n    if (!mapInstanceRef.current || !layerGroupsRef.current) return;\n\n    const map = mapInstanceRef.current;\n    const layerGroups = layerGroupsRef.current;\n\n    Object.keys(enabledLayers).forEach(layerType => {\n      const layerGroup = layerGroups[layerType];\n      if (layerGroup) {\n        if (enabledLayers[layerType]) {\n          if (!map.hasLayer(layerGroup)) {\n            layerGroup.addTo(map);\n          }\n        } else {\n          if (map.hasLayer(layerGroup)) {\n            map.removeLayer(layerGroup);\n          }\n        }\n      }\n    });\n  }, [enabledLayers]);\n\n\n  // Export map as PDF\n  const handleExportPDF = async () => {\n    setIsExporting(true);\n    try {\n      const mapElement = mapRef.current;\n      if (mapElement) {\n        const canvas = await html2canvas(mapElement, {\n          useCORS: true,\n          scale: 2,\n          width: mapElement.offsetWidth,\n          height: mapElement.offsetHeight\n        });\n        \n        const link = document.createElement('a');\n        link.download = `infravision-map-${new Date().toISOString().split('T')[0]}.png`;\n        link.href = canvas.toDataURL('image/png');\n        link.click();\n        \n        toast({\n          title: \"Map Exported\",\n          description: \"Your map has been saved as a PNG file.\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export map. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  // Share map\n  const handleShareMap = async () => {\n    try {\n      if (navigator.share) {\n        await navigator.share({\n          title: 'InfraVision - Green Hydrogen Infrastructure Plan',\n          text: 'Check out this hydrogen infrastructure planning map!',\n          url: window.location.href\n        });\n      } else {\n        // Fallback to clipboard\n        await navigator.clipboard.writeText(window.location.href);\n        toast({\n          title: \"Link Copied\",\n          description: \"Map link has been copied to clipboard.\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Share Failed\",\n        description: \"Failed to share map. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Get score color based on value\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return 'text-green-600 bg-green-50 border-green-200';\n    if (score >= 60) return 'text-yellow-600 bg-yellow-50 border-yellow-200';\n    if (score >= 40) return 'text-orange-600 bg-orange-50 border-orange-200';\n    return 'text-red-600 bg-red-50 border-red-200';\n  };\n\n  return (\n    <div className=\"relative w-full h-full\">\n      {/* Map Container */}\n      <div ref={mapRef} className=\"w-full h-full\" data-testid=\"map-container\" />\n\n      {/* Combined Site Analysis Panel */}\n      {showAnalytics && currentAnalysis && (\n        <SiteAnalysisPanel \n          analysis={currentAnalysis}\n          onClose={() => setShowAnalytics(false)}\n          isLoading={analyzeSiteMutation.isPending}\n        />\n      )}\n\n      {/* Floating Controls */}\n      <div className=\"absolute top-4 right-4 z-[1000] space-y-2\">\n        {!sidebarOpen && (\n          <Button\n            size=\"icon\"\n            variant=\"outline\"\n            onClick={onSidebarToggle}\n            className=\"w-10 h-10 bg-card border border-border shadow-lg hover:bg-muted\"\n            data-testid=\"button-sidebar-toggle\"\n          >\n            <Menu className=\"w-4 h-4\" />\n          </Button>\n        )}\n      </div>\n\n      {/* Export and Share Controls */}\n      <div className=\"absolute bottom-4 right-4 z-[1000] space-y-2\">\n        <Button\n          size=\"sm\"\n          variant=\"outline\"\n          onClick={handleExportPDF}\n          disabled={isExporting}\n          className=\"bg-card border border-border shadow-lg hover:bg-muted gap-2\"\n          data-testid=\"button-export-pdf\"\n        >\n          <Download className=\"w-4 h-4\" />\n          {isExporting ? \"Exporting...\" : \"Export Image\"}\n        </Button>\n        \n        <Button\n          size=\"sm\"\n          variant=\"outline\"\n          onClick={handleShareMap}\n          className=\"bg-card border border-border shadow-lg hover:bg-muted gap-2\"\n          data-testid=\"button-share-map\"\n        >\n          <Share2 className=\"w-4 h-4\" />\n          Share\n        </Button>\n      </div>\n\n      {/* Enhanced Instructions with Indian Context */}\n      <div className=\"absolute bottom-4 left-4 z-[999] bg-card border border-border rounded-lg p-3 md:p-4 shadow-lg max-w-xs md:max-w-sm hidden lg:block\">\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-primary rounded-full animate-pulse\"></div>\n            <p className=\"text-xs text-muted-foreground\">\n              <strong>Click</strong> anywhere in India to place hydrogen plant\n            </p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n            <p className=\"text-xs text-muted-foreground\">\n              <strong>Drag</strong> marker to find optimal location\n            </p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n            <p className=\"text-xs text-muted-foreground\">\n              <strong>Double-click</strong> to create permanent site\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Analytics Toggle Button (when panel is hidden) */}\n      {!showAnalytics && currentAnalysis && (\n        <div className=\"absolute bottom-4 right-4 z-[1000]\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setShowAnalytics(true)}\n            className=\"bg-card border border-border shadow-lg hover:bg-muted flex items-center gap-2\"\n          >\n            <TrendingUp className=\"w-4 h-4\" />\n            <span className=\"text-sm hidden md:inline\">Show Analysis</span>\n            <div className={`px-2 py-1 rounded text-xs font-bold ${getScoreColor(currentAnalysis.suitabilityScore)}`}>\n              {currentAnalysis.suitabilityScore}\n            </div>\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":24789},"client/src/components/Sidebar.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Brain,\n  Layers,\n  Zap,\n  Plus,\n  Download,\n  Calculator,\n  Share,\n  BarChart3,\n  Wind,\n  Sun,\n  Building2,\n  Factory,\n  Truck,\n  Zap as ZapIcon,\n} from \"lucide-react\";\nimport type {\n  HydrogenSite,\n  RenewableSource,\n  DemandCenter,\n} from \"@/types/hydrogen\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onToggle: () => void;\n  onSiteSelect: (site: HydrogenSite) => void;\n  onDashboardToggle: () => void;\n  onLayerToggle: (layerType: string, enabled: boolean) => void;\n  enabledLayers: { [key: string]: boolean };\n  onSiteNavigate: (lat: number, lng: number) => void;\n}\n\nexport default function Sidebar({ isOpen, onSiteSelect, onDashboardToggle, onLayerToggle, enabledLayers, onSiteNavigate }: SidebarProps) {\n  const { data: aiSuggestions = [] } = useQuery<HydrogenSite[]>({\n    queryKey: [\"/api/ai-suggestions\"],\n    refetchOnWindowFocus: false,\n  });\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return \"text-green-600 dark:text-green-400\";\n    if (score >= 60) return \"text-yellow-600 dark:text-yellow-400\";\n    return \"text-red-600 dark:text-red-400\";\n  };\n\n  const getScoreLabel = (score: number) => {\n    if (score >= 80) return \"Excellent\";\n    if (score >= 60) return \"Good\";\n    return \"Poor\";\n  };\n\n  const getRenewableIcon = (type: string) => {\n    switch (type.toLowerCase()) {\n      case \"wind\":\n        return <Wind className=\"w-3 h-3\" />;\n      case \"solar\":\n        return <Sun className=\"w-3 h-3\" />;\n      default:\n        return <ZapIcon className=\"w-3 h-3\" />;\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <aside className=\"w-80 bg-card border-r border-border overflow-y-auto\">\n      <div className=\"p-6 space-y-6\">\n        {/* AI Suggestions - Indian Hydrogen Plans */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-foreground flex items-center space-x-2\">\n              <Brain className=\"w-4 h-4 text-primary\" />\n              <span>Indian Hydrogen Plans</span>\n            </h2>\n            <span className=\"text-xs bg-accent text-accent-foreground px-2 py-1 rounded-full font-medium\">\n              {aiSuggestions.length} Projects\n            </span>\n          </div>\n\n          <div className=\"space-y-3\">\n            {aiSuggestions.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Brain className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                <p className=\"text-sm\">Loading hydrogen projects...</p>\n                <p className=\"text-xs\">\n                  Real operational and planned projects across India\n                </p>\n              </div>\n            ) : (\n              aiSuggestions.map((suggestion) => (\n                <Card\n                  key={suggestion.id}\n                  className=\"p-4 border border-border hover:border-primary transition-colors cursor-pointer\"\n                  onClick={() => {\n                    onSiteSelect(suggestion);\n                    onSiteNavigate(parseFloat(suggestion.latitude), parseFloat(suggestion.longitude));\n                  }}\n                  data-testid={`card-ai-suggestion-${suggestion.id}`}\n                >\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <h3 className=\"font-medium text-foreground text-sm leading-tight\">\n                      {suggestion.name}\n                    </h3>\n                    <span\n                      className={`text-xs px-2 py-1 rounded-full font-medium ${getScoreColor(suggestion.suitabilityScore)} bg-muted`}\n                    >\n                      {suggestion.suitabilityScore}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mb-3\">\n                    {getScoreLabel(suggestion.suitabilityScore)} suitability • Click to view details\n                  </p>\n                  <div className=\"flex items-center space-x-3 text-xs\">\n                    <span className=\"flex items-center space-x-1 text-primary\">\n                      {getRenewableIcon(\"wind\")}\n                      <span>\n                        {suggestion.renewableUtilization || 0}%\n                      </span>\n                    </span>\n                    {suggestion.co2SavedAnnually && (\n                      <span className=\"flex items-center space-x-1 text-accent\">\n                        <Building2 className=\"w-3 h-3\" />\n                        <span>\n                          {(suggestion.co2SavedAnnually / 1000).toFixed(0)}kt CO₂/yr\n                        </span>\n                      </span>\n                    )}\n                  </div>\n                </Card>\n              ))\n            )}\n          </div>\n        </div>\n\n        {/* Dashboard Access */}\n        <div className=\"space-y-4\">\n          <Button \n            onClick={onDashboardToggle}\n            className=\"w-full justify-start gap-2 bg-accent hover:bg-accent/90 text-accent-foreground\"\n            data-testid=\"button-dashboard\"\n          >\n            <BarChart3 className=\"w-4 h-4\" />\n            Plants Dashboard\n          </Button>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":5421},"client/src/components/SuitabilityScore.tsx":{"content":"import { Card, CardHeader, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { X } from \"lucide-react\";\nimport type { SiteAnalysis } from \"@/types/hydrogen\";\n\ninterface SuitabilityScoreProps {\n  analysis: SiteAnalysis;\n  onClose: () => void;\n}\n\nexport default function SuitabilityScore({ analysis, onClose }: SuitabilityScoreProps) {\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return \"text-green-600 dark:text-green-400\";\n    if (score >= 60) return \"text-yellow-600 dark:text-yellow-400\";\n    return \"text-red-600 dark:text-red-400\";\n  };\n\n  const getScoreLabel = (score: number) => {\n    if (score >= 80) return \"Excellent Site 🌟\";\n    if (score >= 60) return \"Good Site ✅\";\n    return \"Poor Site ❌\";\n  };\n\n  const getScoreBgColor = (score: number) => {\n    if (score >= 80) return \"bg-green-100 dark:bg-green-900/20\";\n    if (score >= 60) return \"bg-yellow-100 dark:bg-yellow-900/20\";\n    return \"bg-red-100 dark:bg-red-900/20\";\n  };\n\n  return (\n    <Card className=\"absolute top-4 left-4 z-[1000] w-80 md:w-80 max-w-[calc(100vw-2rem)] bg-card border border-border shadow-lg\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-semibold text-foreground\">Site Suitability</h3>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onClose}\n            className=\"w-6 h-6\"\n            data-testid=\"button-close-score\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* Score Display */}\n        <div className=\"flex items-center space-x-3\">\n          <div className={`w-12 h-12 rounded-full flex items-center justify-center ${getScoreBgColor(analysis.suitabilityScore)}`}>\n            <span className={`font-bold text-lg ${getScoreColor(analysis.suitabilityScore)}`} data-testid=\"text-score-value\">\n              {analysis.suitabilityScore}\n            </span>\n          </div>\n          <div>\n            <p className={`text-sm font-medium ${getScoreColor(analysis.suitabilityScore)}`} data-testid=\"text-score-label\">\n              {getScoreLabel(analysis.suitabilityScore)}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">Out of 100</p>\n          </div>\n        </div>\n\n        {/* Factor Breakdown */}\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-xs\">\n            <span className=\"text-muted-foreground\">Renewable Access</span>\n            <span className=\"text-primary font-medium\" data-testid=\"text-renewable-access\">\n              {analysis.factors.renewableAccess}%\n            </span>\n          </div>\n          <div className=\"flex justify-between text-xs\">\n            <span className=\"text-muted-foreground\">Transport Cost</span>\n            <span className=\"text-accent font-medium\" data-testid=\"text-transport-cost\">\n              {analysis.factors.transportCost}\n            </span>\n          </div>\n          <div className=\"flex justify-between text-xs\">\n            <span className=\"text-muted-foreground\">Demand Proximity</span>\n            <span className=\"text-secondary font-medium\" data-testid=\"text-demand-proximity\">\n              {analysis.factors.demandProximity}\n            </span>\n          </div>\n          <div className=\"flex justify-between text-xs\">\n            <span className=\"text-muted-foreground\">Water Availability</span>\n            <span className=\"text-primary font-medium\" data-testid=\"text-water-availability\">\n              {analysis.factors.waterAvailability}\n            </span>\n          </div>\n          <div className=\"flex justify-between text-xs\">\n            <span className=\"text-muted-foreground\">Regulatory Support</span>\n            <span className=\"text-muted-foreground font-medium\" data-testid=\"text-regulatory-support\">\n              {analysis.factors.regulatorySupport}\n            </span>\n          </div>\n        </div>\n\n        {/* Quick Impact Metrics */}\n        <div className=\"pt-2 border-t border-border space-y-2\">\n          <div className=\"flex justify-between text-xs\">\n            <span className=\"text-muted-foreground\">Est. CO₂ Savings</span>\n            <span className=\"text-green-600 dark:text-green-400 font-medium\" data-testid=\"text-co2-savings\">\n              {(analysis.co2SavedAnnually / 1000).toFixed(0)}kt/year\n            </span>\n          </div>\n          <div className=\"flex justify-between text-xs\">\n            <span className=\"text-muted-foreground\">Industries Supported</span>\n            <span className=\"text-secondary font-medium\" data-testid=\"text-industries-supported\">\n              {analysis.industriesSupported}\n            </span>\n          </div>\n          <div className=\"flex justify-between text-xs\">\n            <span className=\"text-muted-foreground\">Renewable Utilization</span>\n            <span className=\"text-accent font-medium\" data-testid=\"text-renewable-utilization\">\n              {analysis.renewableUtilization}%\n            </span>\n          </div>\n        </div>\n\n        {/* Recommendations */}\n        {analysis.recommendations.length > 0 && (\n          <div className=\"pt-2 border-t border-border\">\n            <p className=\"text-xs text-muted-foreground mb-1\">Recommendations:</p>\n            <ul className=\"text-xs space-y-1\">\n              {analysis.recommendations.slice(0, 2).map((rec, index) => (\n                <li key={index} className=\"text-foreground\">• {rec}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5685},"client/src/components/SupabaseAuthProvider.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react'\nimport { Session, User as SupabaseUser } from '@supabase/supabase-js'\nimport { supabase } from '@/lib/supabase'\n\ninterface AuthContextType {\n  user: SupabaseUser | null\n  session: Session | null\n  loading: boolean\n  signOut: () => Promise<void>\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  session: null,\n  loading: true,\n  signOut: async () => {},\n})\n\nexport function SupabaseAuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<SupabaseUser | null>(null)\n  const [session, setSession] = useState<Session | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session)\n      setUser(session?.user ?? null)\n      setLoading(false)\n    })\n\n    // Listen for auth changes\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session)\n      setUser(session?.user ?? null)\n      setLoading(false)\n    })\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  const signOut = async () => {\n    await supabase.auth.signOut()\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, session, loading, signOut }}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport const useSupabaseAuth = () => {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error('useSupabaseAuth must be used within a SupabaseAuthProvider')\n  }\n  return context\n}","size_bytes":1628},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as Theme;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    }\n  }, []);\n\n  useEffect(() => {\n    document.documentElement.classList.remove(\"light\", \"dark\");\n    document.documentElement.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1234},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useSupabaseAuth } from \"@/components/SupabaseAuthProvider\";\n\nexport function useAuth() {\n  const { user, loading } = useSupabaseAuth();\n\n  return {\n    user,\n    isLoading: loading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":227},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js'\n\n// For development, we'll use fallback values that can be set via environment\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://placeholder.supabase.co'\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'placeholder-key'\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\nexport type User = {\n  id: string\n  email?: string\n  user_metadata?: {\n    full_name?: string\n    avatar_url?: string\n  }\n}","size_bytes":499},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { useState } from \"react\";\nimport Header from \"@/components/Header\";\nimport Sidebar from \"@/components/Sidebar\";\nimport MapView from \"@/components/MapView\";\nimport ImpactPanel from \"@/components/ImpactPanel\";\nimport PlantsDashboard from \"@/components/PlantsDashboard\";\nimport Chatbot from \"@/components/Chatbot\";\nimport type { HydrogenSite, SiteAnalysis } from \"@/types/hydrogen\";\n\nexport default function Home() {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [selectedSite, setSelectedSite] = useState<HydrogenSite | null>(null);\n  const [showImpactPanel, setShowImpactPanel] = useState(false);\n  const [showDashboard, setShowDashboard] = useState(false);\n  const [currentScore, setCurrentScore] = useState<SiteAnalysis | null>(null);\n  const [showScore, setShowScore] = useState(false);\n  const [enabledLayers, setEnabledLayers] = useState<{ [key: string]: boolean }>({\n    renewable: true,\n    demand: true,\n    hydrogen: true,\n    aiSuggestions: true\n  });\n  const [mapInstance, setMapInstance] = useState<any>(null);\n\n  const handleSiteSelect = (site: HydrogenSite) => {\n    setSelectedSite(site);\n    setShowImpactPanel(true);\n  };\n\n  const handleScoreUpdate = (analysis: SiteAnalysis) => {\n    setCurrentScore(analysis);\n    setShowScore(true);\n  };\n\n  const handleCloseScore = () => {\n    setShowScore(false);\n    setCurrentScore(null);\n  };\n\n  const handleLayerToggle = (layerType: string, enabled: boolean) => {\n    setEnabledLayers(prev => ({ ...prev, [layerType]: enabled }));\n  };\n\n  const handleSiteNavigate = (lat: number, lng: number) => {\n    if (mapInstance) {\n      mapInstance.setView([lat, lng], 12);\n    }\n  };\n\n\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Header \n        onChatToggle={() => setIsChatOpen(!isChatOpen)}\n      />\n      \n      <div className=\"flex h-[calc(100vh-4rem)]\">\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onToggle={() => setIsSidebarOpen(!isSidebarOpen)}\n          onSiteSelect={handleSiteSelect}\n          onDashboardToggle={() => setShowDashboard(!showDashboard)}\n          onLayerToggle={handleLayerToggle}\n          enabledLayers={enabledLayers}\n          onSiteNavigate={handleSiteNavigate}\n        />\n        \n        <main className=\"flex-1 relative\">\n          <MapView \n            onSiteSelect={handleSiteSelect}\n            onScoreUpdate={handleScoreUpdate}\n            sidebarOpen={isSidebarOpen}\n            onSidebarToggle={() => setIsSidebarOpen(!isSidebarOpen)}\n            enabledLayers={enabledLayers}\n            onMapReady={setMapInstance}\n          />\n          \n          \n          {showImpactPanel && selectedSite && (\n            <ImpactPanel \n              site={selectedSite}\n              onClose={() => setShowImpactPanel(false)}\n            />\n          )}\n\n          {showDashboard && (\n            <PlantsDashboard \n              onClose={() => setShowDashboard(false)}\n            />\n          )}\n          \n        </main>\n      </div>\n      \n      {isChatOpen && (\n        <Chatbot onClose={() => setIsChatOpen(false)} />\n      )}\n    </div>\n  );\n}\n","size_bytes":3174},"client/src/pages/Landing.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport CustomAuth from \"@/components/CustomAuth\";\nimport { useSupabaseAuth } from \"@/components/SupabaseAuthProvider\";\nimport { useState } from \"react\";\nimport { Sun, Moon, Leaf, Brain, BarChart3, MapPin, Zap, Building2, X } from \"lucide-react\";\n\nexport default function Landing() {\n  const { theme, toggleTheme } = useTheme();\n  const { user } = useSupabaseAuth();\n  const [showAuth, setShowAuth] = useState(false);\n\n  const handleGetStarted = () => {\n    setShowAuth(true);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Leaf className=\"w-4 h-4 text-primary-foreground\" />\n              </div>\n              <div>\n                <h1 className=\"text-lg font-bold text-foreground\">InfraVision</h1>\n                <p className=\"text-xs text-muted-foreground\">Green Hydrogen Planning</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <button \n                onClick={toggleTheme}\n                className=\"p-2 rounded-md hover:bg-muted transition-colors\"\n                data-testid=\"button-theme-toggle\"\n              >\n                {theme === \"light\" ? (\n                  <Moon className=\"w-4 h-4 text-accent\" />\n                ) : (\n                  <Sun className=\"w-4 h-4 text-accent\" />\n                )}\n              </button>\n              \n              <Button onClick={handleGetStarted} data-testid=\"button-login\">\n                Sign In\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl md:text-6xl font-bold text-foreground mb-6\">\n            Green Hydrogen\n            <span className=\"text-primary block\">InfraVision</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-3xl mx-auto\">\n            Play, Plan, and Prove Impact with AI-powered site suggestions, gamified drag-and-drop mapping, \n            and sustainability impact dashboards for green hydrogen infrastructure.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\" \n              onClick={handleGetStarted}\n              className=\"text-lg px-8 py-3\"\n              data-testid=\"button-get-started\"\n            >\n              Get Started\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"lg\"\n              className=\"text-lg px-8 py-3\"\n              data-testid=\"button-learn-more\"\n              onClick={() => {\n                document.querySelector('#features')?.scrollIntoView({ behavior: 'smooth' });\n              }}\n            >\n              Learn More\n            </Button>\n          </div>\n        </div>\n\n        {/* Features Grid */}\n        <div id=\"features\" className=\"grid md:grid-cols-3 gap-8 mb-16\">\n          <Card className=\"border-border\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                <MapPin className=\"w-6 h-6 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-2\">Gamified Optimization</h3>\n              <p className=\"text-muted-foreground\">\n                Drag and drop hydrogen plant markers directly onto an interactive map. \n                Get instant suitability scores with color-coded feedback.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-border\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center mb-4\">\n                <Brain className=\"w-6 h-6 text-secondary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-2\">AI-Assisted Suggestions</h3>\n              <p className=\"text-muted-foreground\">\n                Leverage artificial intelligence for proactive site recommendations. \n                Discover optimal locations with machine learning insights.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-border\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center mb-4\">\n                <BarChart3 className=\"w-6 h-6 text-accent\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-2\">Impact Dashboard</h3>\n              <p className=\"text-muted-foreground\">\n                Quantify environmental and economic benefits with CO₂ savings, \n                industry support metrics, and renewable utilization charts.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Key Features */}\n        <div className=\"bg-muted rounded-lg p-8 mb-16\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-8 text-center\">Why InfraVision?</h2>\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <div className=\"space-y-6\">\n              <div className=\"flex items-start space-x-4\">\n                <Zap className=\"w-6 h-6 text-primary flex-shrink-0 mt-1\" />\n                <div>\n                  <h3 className=\"font-semibold text-foreground mb-2\">Real-time Analysis</h3>\n                  <p className=\"text-muted-foreground\">\n                    Instant suitability scoring based on proximity to renewable energy sources, \n                    industrial demand, and transport logistics.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-4\">\n                <Building2 className=\"w-6 h-6 text-secondary flex-shrink-0 mt-1\" />\n                <div>\n                  <h3 className=\"font-semibold text-foreground mb-2\">Infrastructure Mapping</h3>\n                  <p className=\"text-muted-foreground\">\n                    Visualize existing hydrogen plants, renewable sources, demand centers, \n                    and pipeline networks on interactive maps.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-6\">\n              <div className=\"flex items-start space-x-4\">\n                <Brain className=\"w-6 h-6 text-accent flex-shrink-0 mt-1\" />\n                <div>\n                  <h3 className=\"font-semibold text-foreground mb-2\">AI-Powered Insights</h3>\n                  <p className=\"text-muted-foreground\">\n                    Machine learning algorithms analyze multiple factors to recommend \n                    optimal sites for hydrogen infrastructure development.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-4\">\n                <Leaf className=\"w-6 h-6 text-primary flex-shrink-0 mt-1\" />\n                <div>\n                  <h3 className=\"font-semibold text-foreground mb-2\">Sustainability Focus</h3>\n                  <p className=\"text-muted-foreground\">\n                    Track CO₂ savings, renewable energy utilization, and industry support \n                    to ensure climate-positive investments.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"text-center\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n            Ready to Transform Hydrogen Infrastructure Planning?\n          </h2>\n          <p className=\"text-lg text-muted-foreground mb-8\">\n            Join the future of coordinated, efficient green hydrogen development.\n          </p>\n          <Button \n            size=\"lg\" \n            onClick={handleGetStarted}\n            className=\"text-lg px-12 py-4\"\n            data-testid=\"button-start-planning\"\n          >\n            Start Planning Today\n          </Button>\n        </div>\n      </main>\n      \n      {/* Auth Modal */}\n      {showAuth && (\n        <CustomAuth onClose={() => setShowAuth(false)} />\n      )}\n    </div>\n  );\n}\n","size_bytes":8839},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/hydrogen.ts":{"content":"export interface HydrogenSite {\n  id: string;\n  userId: string;\n  name: string;\n  latitude: string;\n  longitude: string;\n  suitabilityScore: number;\n  isAiSuggested?: boolean;\n  co2SavedAnnually?: number;\n  industriesSupported?: number;\n  renewableUtilization?: number;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\nexport interface RenewableSource {\n  id: string;\n  name: string;\n  type: string; // 'wind', 'solar', 'hydro'\n  latitude: string;\n  longitude: string;\n  capacity?: number;\n  createdAt?: string;\n}\n\nexport interface DemandCenter {\n  id: string;\n  name: string;\n  type: string; // 'steel', 'transport', 'chemical', 'power'\n  latitude: string;\n  longitude: string;\n  demandLevel: string; // 'low', 'medium', 'high'\n  createdAt?: string;\n}\n\nexport interface SiteAnalysis {\n  suitabilityScore: number;\n  factors: {\n    renewableAccess: number;\n    transportCost: string;\n    demandProximity: string;\n    waterAvailability: string;\n    regulatorySupport: string;\n  };\n  recommendations: string[];\n  co2SavedAnnually: number;\n  industriesSupported: number;\n  renewableUtilization: number;\n}\n\nexport interface ChatMessage {\n  role: 'user' | 'assistant';\n  content: string;\n}\n","size_bytes":1182},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-[900] hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23570},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/seed-indian-data.ts":{"content":"import { db } from \"./db\";\nimport { renewableSources, demandCenters, hydrogenSites } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport { nanoid } from \"nanoid\";\n\nexport async function seedIndianData() {\n  try {\n    console.log(\"Clearing existing data...\");\n    \n    // Clear existing data\n    await db.delete(renewableSources);\n    await db.delete(demandCenters);\n    await db.delete(hydrogenSites).where(eq(hydrogenSites.isAiSuggested, true));\n\n    console.log(\"Seeding Indian renewable energy sources...\");\n\n    // Insert Indian renewable energy sources\n    await db.insert(renewableSources).values([\n      {\n        name: \"Delhi NCR Solar Park\",\n        type: \"Solar Farm\",\n        latitude: \"28.7041\", // Delhi NCR\n        longitude: \"77.1025\",\n        capacity: 500\n      },\n      {\n        name: \"Mumbai Offshore Wind Farm\",\n        type: \"Wind Farm\",\n        latitude: \"19.0760\", // Mumbai\n        longitude: \"72.8777\",\n        capacity: 600\n      },\n      {\n        name: \"Bangalore Tech Solar Park\",\n        type: \"Solar Farm\",\n        latitude: \"12.9716\", // Bangalore\n        longitude: \"77.5946\",\n        capacity: 450\n      },\n      {\n        name: \"Tamil Nadu Coastal Wind Farm\",\n        type: \"Wind Farm\",\n        latitude: \"13.0827\", // Chennai\n        longitude: \"80.2707\",\n        capacity: 380\n      },\n      {\n        name: \"West Bengal Solar Plant\",\n        type: \"Solar Farm\",\n        latitude: \"22.5726\", // Kolkata\n        longitude: \"88.3639\",\n        capacity: 350\n      },\n      {\n        name: \"Gujarat Wind Energy Park\",\n        type: \"Wind Farm\",\n        latitude: \"23.0225\", // Ahmedabad\n        longitude: \"72.5714\",\n        capacity: 420\n      },\n      {\n        name: \"Maharashtra Solar Grid\",\n        type: \"Solar Farm\",\n        latitude: \"18.5204\", // Pune\n        longitude: \"73.8567\",\n        capacity: 300\n      },\n      {\n        name: \"Rajasthan Desert Wind Farm\",\n        type: \"Wind Farm\",\n        latitude: \"26.9124\", // Jaipur\n        longitude: \"75.7873\",\n        capacity: 480\n      }\n    ]);\n\n    console.log(\"Seeding Indian demand centers...\");\n\n    // Insert Indian demand centers\n    await db.insert(demandCenters).values([\n      {\n        name: \"Tata Steel Jamshedpur\",\n        type: \"Steel Manufacturing\",\n        latitude: \"22.2587\", // Jamshedpur\n        longitude: \"84.8467\",\n        demandLevel: \"High\"\n      },\n      {\n        name: \"ONGC Vadodara Chemical Complex\",\n        type: \"Chemical Plant\",\n        latitude: \"21.1702\", // Vadodara\n        longitude: \"72.8311\",\n        demandLevel: \"High\"\n      },\n      {\n        name: \"Mumbai Refinery Complex\",\n        type: \"Refinery\",\n        latitude: \"19.0176\", // Mumbai Port\n        longitude: \"72.8562\",\n        demandLevel: \"High\"\n      },\n      {\n        name: \"Chennai Port Trust\",\n        type: \"Port\",\n        latitude: \"13.1068\", // Chennai Port\n        longitude: \"80.3045\",\n        demandLevel: \"Medium\"\n      },\n      {\n        name: \"SAIL Bhilai Steel Plant\",\n        type: \"Steel Manufacturing\",\n        latitude: \"20.9517\", // Bhilai\n        longitude: \"81.3860\",\n        demandLevel: \"High\"\n      },\n      {\n        name: \"Gurgaon Industrial Hub\",\n        type: \"Chemical Plant\",\n        latitude: \"28.4595\", // Gurgaon Industrial\n        longitude: \"77.0266\",\n        demandLevel: \"Medium\"\n      },\n      {\n        name: \"Kandla Port Authority\",\n        type: \"Port\",\n        latitude: \"21.0376\", // Kandla Port\n        longitude: \"70.2174\",\n        demandLevel: \"Medium\"\n      },\n      {\n        name: \"Indian Oil Vadodara Refinery\",\n        type: \"Refinery\",\n        latitude: \"22.3072\", // Vadodara Refinery\n        longitude: \"73.1812\",\n        demandLevel: \"High\"\n      }\n    ]);\n\n    console.log(\"Seeding Indian AI-suggested hydrogen sites...\");\n\n    // Insert Indian AI-suggested hydrogen sites based on real government projects\n    await db.insert(hydrogenSites).values([\n      // Real operational projects\n      {\n        name: \"GAIL Guna Green Hydrogen Plant (Operational 2024)\",\n        latitude: \"24.6536\",\n        longitude: \"77.3136\",\n        suitabilityScore: 94,\n        co2SavedAnnually: 280000,\n        industriesSupported: 18,\n        renewableUtilization: 92,\n        isAiSuggested: true,\n        userId: \"ai-system\"\n      },\n      {\n        name: \"Adani Kutch Off-Grid Green H2 Plant (5MW)\",\n        latitude: \"23.0225\",\n        longitude: \"69.6669\",\n        suitabilityScore: 91,\n        co2SavedAnnually: 260000,\n        industriesSupported: 15,\n        renewableUtilization: 89,\n        isAiSuggested: true,\n        userId: \"ai-system\"\n      },\n      {\n        name: \"NTPC Kawas Green H2 Blending Project\",\n        latitude: \"21.4101\",\n        longitude: \"72.6756\",\n        suitabilityScore: 88,\n        co2SavedAnnually: 240000,\n        industriesSupported: 12,\n        renewableUtilization: 85,\n        isAiSuggested: true,\n        userId: \"ai-system\"\n      },\n      {\n        name: \"NTPC Rann of Kutch 4750MW RE Park\",\n        latitude: \"23.7337\",\n        longitude: \"69.0585\",\n        suitabilityScore: 96,\n        co2SavedAnnually: 320000,\n        industriesSupported: 22,\n        renewableUtilization: 95,\n        isAiSuggested: true,\n        userId: \"ai-system\"\n      },\n      {\n        name: \"NTPC Leh Green H2 Fuelling Station\",\n        latitude: \"34.1526\",\n        longitude: \"77.5770\",\n        suitabilityScore: 85,\n        co2SavedAnnually: 180000,\n        industriesSupported: 8,\n        renewableUtilization: 82,\n        isAiSuggested: true,\n        userId: \"ai-system\"\n      },\n      // SIGHT Scheme Green Ammonia Projects\n      {\n        name: \"Madhya Bharat Agro Dhule (70,000 MT)\",\n        latitude: \"20.9042\",\n        longitude: \"74.7749\",\n        suitabilityScore: 87,\n        co2SavedAnnually: 220000,\n        industriesSupported: 14,\n        renewableUtilization: 83,\n        isAiSuggested: true,\n        userId: \"ai-system\"\n      },\n      {\n        name: \"Madhya Bharat Agro Sagar (60,000 MT)\",\n        latitude: \"23.8388\",\n        longitude: \"78.7378\",\n        suitabilityScore: 84,\n        co2SavedAnnually: 200000,\n        industriesSupported: 11,\n        renewableUtilization: 80,\n        isAiSuggested: true,\n        userId: \"ai-system\"\n      },\n      // Mobility pilot project locations\n      {\n        name: \"Greater Noida-Delhi-Agra H2 Corridor\",\n        latitude: \"28.4744\",\n        longitude: \"77.5040\",\n        suitabilityScore: 82,\n        co2SavedAnnually: 190000,\n        industriesSupported: 16,\n        renewableUtilization: 78,\n        isAiSuggested: true,\n        userId: \"ai-system\"\n      },\n      {\n        name: \"Bhubaneswar-Konark-Puri H2 Route\",\n        latitude: \"20.2961\",\n        longitude: \"85.8245\",\n        suitabilityScore: 79,\n        co2SavedAnnually: 170000,\n        industriesSupported: 9,\n        renewableUtilization: 75,\n        isAiSuggested: true,\n        userId: \"ai-system\"\n      },\n      {\n        name: \"Ahmedabad-Vadodara-Surat H2 Corridor\",\n        latitude: \"22.3072\",\n        longitude: \"73.1812\",\n        suitabilityScore: 90,\n        co2SavedAnnually: 250000,\n        industriesSupported: 17,\n        renewableUtilization: 87,\n        isAiSuggested: true,\n        userId: \"ai-system\"\n      }\n    ]);\n\n    console.log(\"✅ Indian data seeded successfully!\");\n  } catch (error) {\n    console.error(\"❌ Error seeding Indian data:\", error);\n  }\n}\n\n// Run seeding\nseedIndianData().then(() => process.exit(0));","size_bytes":7439},"client/src/components/HelpForm.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { X, Send, HelpCircle } from \"lucide-react\";\n\ninterface HelpFormProps {\n  onClose: () => void;\n}\n\nexport default function HelpForm({ onClose }: HelpFormProps) {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    organization: '',\n    queryType: '',\n    message: ''\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [toastType, setToastType] = useState<'success' | 'error'>('success');\n\n  useEffect(() => {\n    // Hide the map and other elements\n    const mapElements = document.querySelectorAll('.leaflet-container, [class*=\"map\"], [id*=\"map\"]');\n    const savedStyles: { element: Element; display: string; visibility: string }[] = [];\n\n    mapElements.forEach((el) => {\n      const element = el as HTMLElement;\n      savedStyles.push({\n        element,\n        display: element.style.display,\n        visibility: element.style.visibility\n      });\n      element.style.visibility = 'hidden';\n      element.style.pointerEvents = 'none';\n    });\n\n    // Prevent body scroll\n    document.body.style.overflow = 'hidden';\n    document.documentElement.style.overflow = 'hidden';\n\n    return () => {\n      // Restore map visibility\n      savedStyles.forEach(({ element, display, visibility }) => {\n        const el = element as HTMLElement;\n        el.style.display = display;\n        el.style.visibility = visibility;\n        el.style.pointerEvents = '';\n      });\n      document.body.style.overflow = '';\n      document.documentElement.style.overflow = '';\n    };\n  }, []);\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const showSuccessToast = (message: string) => {\n    setToastMessage(message);\n    setToastType('success');\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  const showErrorToast = (message: string) => {\n    setToastMessage(message);\n    setToastType('error');\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  const handleSubmit = async () => {\n    if (!formData.name || !formData.email || !formData.queryType || !formData.message) {\n      showErrorToast('Please fill in all required fields');\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      const response = await fetch('https://formspree.io/f/mldwjzvg', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n        },\n        body: JSON.stringify({\n          name: formData.name,\n          email: formData.email,\n          organization: formData.organization,\n          queryType: formData.queryType,\n          message: formData.message,\n          subject: `InfraVision Help Request - ${formData.queryType}`,\n          _replyto: formData.email,\n        }),\n      });\n\n      if (response.ok) {\n        showSuccessToast(\"Thank you for reaching out! We'll get back to you within 24 hours.\");\n\n        setFormData({\n          name: '',\n          email: '',\n          organization: '',\n          queryType: '',\n          message: ''\n        });\n\n        setTimeout(() => {\n          onClose();\n        }, 2000);\n      } else {\n        throw new Error('Failed to send message');\n      }\n    } catch (error) {\n      showErrorToast('Please try again or contact us directly at support@infravision.com');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <>\n      {/* Full screen overlay that completely covers everything */}\n      <div \n        style={{\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          width: '100vw',\n          height: '100vh',\n          backgroundColor: 'rgba(0, 0, 0, 0.9)',\n          zIndex: 999999999,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          padding: '20px',\n          boxSizing: 'border-box'\n        }}\n        onClick={(e) => {\n          if (e.target === e.currentTarget) {\n            onClose();\n          }\n        }}\n      >\n        {/* Modal Card */}\n        <div\n          style={{\n            width: '100%',\n            maxWidth: '700px',\n            maxHeight: '90vh',\n            backgroundColor: 'white',\n            borderRadius: '16px',\n            boxShadow: '0 25px 50px rgba(0, 0, 0, 0.8)',\n            overflow: 'hidden',\n            border: '4px solid #2563eb',\n            zIndex: 999999999\n          }}\n          onClick={(e) => e.stopPropagation()}\n        >\n          {/* Header */}\n          <div style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            padding: '24px',\n            backgroundColor: '#eff6ff',\n            borderBottom: '3px solid #2563eb'\n          }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\n              <div style={{ \n                backgroundColor: '#2563eb', \n                borderRadius: '50%', \n                padding: '8px',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              }}>\n                <HelpCircle className=\"w-6 h-6 text-white\" />\n              </div>\n              <h2 style={{ \n                fontSize: '24px', \n                fontWeight: 'bold', \n                color: '#1e40af', \n                margin: 0 \n              }}>\n                Help & Support\n              </h2>\n            </div>\n            <button\n              onClick={onClose}\n              style={{\n                background: 'none',\n                border: 'none',\n                padding: '8px',\n                borderRadius: '8px',\n                cursor: 'pointer',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                backgroundColor: '#fee2e2',\n                color: '#dc2626'\n              }}\n              data-testid=\"button-close-help\"\n            >\n              <X className=\"w-5 h-5\" />\n            </button>\n          </div>\n\n          {/* Content */}\n          <div style={{ \n            padding: '24px', \n            backgroundColor: 'white',\n            maxHeight: 'calc(90vh - 120px)',\n            overflowY: 'auto'\n          }}>\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>\n              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '16px' }}>\n                <div>\n                  <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', marginBottom: '8px', color: '#374151' }}>\n                    Full Name *\n                  </label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter your full name\"\n                    value={formData.name}\n                    name=\"name\"\n                    onChange={(e) => handleInputChange('name', e.target.value)}\n                    data-testid=\"input-name\"\n                    style={{\n                      width: '100%',\n                      padding: '12px',\n                      border: '2px solid #d1d5db',\n                      borderRadius: '8px',\n                      fontSize: '14px',\n                      outline: 'none',\n                      transition: 'border-color 0.2s'\n                    }}\n                    onFocus={(e) => e.target.style.borderColor = '#2563eb'}\n                    onBlur={(e) => e.target.style.borderColor = '#d1d5db'}\n                  />\n                </div>\n\n                <div>\n                  <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', marginBottom: '8px', color: '#374151' }}>\n                    Email Address *\n                  </label>\n                  <input\n                    type=\"email\"\n                    placeholder=\"your.email@company.com\"\n                    value={formData.email}\n                    name=\"email\"\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    data-testid=\"input-email\"\n                    style={{\n                      width: '100%',\n                      padding: '12px',\n                      border: '2px solid #d1d5db',\n                      borderRadius: '8px',\n                      fontSize: '14px',\n                      outline: 'none',\n                      transition: 'border-color 0.2s'\n                    }}\n                    onFocus={(e) => e.target.style.borderColor = '#2563eb'}\n                    onBlur={(e) => e.target.style.borderColor = '#d1d5db'}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', marginBottom: '8px', color: '#374151' }}>\n                  Organization\n                </label>\n                <input\n                  type=\"text\"\n                  placeholder=\"Company name or organization\"\n                  value={formData.organization}\n                  name=\"organization\"\n                  onChange={(e) => handleInputChange('organization', e.target.value)}\n                  data-testid=\"input-organization\"\n                  style={{\n                    width: '100%',\n                    padding: '12px',\n                    border: '2px solid #d1d5db',\n                    borderRadius: '8px',\n                    fontSize: '14px',\n                    outline: 'none',\n                    transition: 'border-color 0.2s'\n                  }}\n                  onFocus={(e) => e.target.style.borderColor = '#2563eb'}\n                  onBlur={(e) => e.target.style.borderColor = '#d1d5db'}\n                />\n              </div>\n\n              <div>\n                <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', marginBottom: '8px', color: '#374151' }}>\n                  Query Type *\n                </label>\n                <select\n                  value={formData.queryType}\n                  name=\"queryType\"\n                  onChange={(e) => handleInputChange('queryType', e.target.value)}\n                  data-testid=\"select-query-type\"\n                  style={{\n                    width: '100%',\n                    padding: '12px',\n                    border: '2px solid #d1d5db',\n                    borderRadius: '8px',\n                    fontSize: '14px',\n                    outline: 'none',\n                    backgroundColor: 'white',\n                    cursor: 'pointer'\n                  }}\n                  onFocus={(e) => e.target.style.borderColor = '#2563eb'}\n                  onBlur={(e) => e.target.style.borderColor = '#d1d5db'}\n                >\n                  <option value=\"\">Select the type of help you need</option>\n                  <option value=\"technical-support\">Technical Support</option>\n                  <option value=\"feature-request\">Feature Request</option>\n                  <option value=\"data-question\">Data & Analytics Question</option>\n                  <option value=\"account-billing\">Account & Billing</option>\n                  <option value=\"integration-help\">Integration Help</option>\n                  <option value=\"training-demo\">Training & Demo Request</option>\n                  <option value=\"partnership\">Partnership Inquiry</option>\n                  <option value=\"bug-report\">Bug Report</option>\n                  <option value=\"general\">General Question</option>\n                </select>\n              </div>\n\n              <div>\n                <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', marginBottom: '8px', color: '#374151' }}>\n                  Detailed Message *\n                </label>\n                <textarea\n                  placeholder=\"Please describe your question or issue in detail. Include any relevant information that might help us assist you better.\"\n                  value={formData.message}\n                  name=\"message\"\n                  onChange={(e) => handleInputChange('message', e.target.value)}\n                  data-testid=\"textarea-message\"\n                  style={{\n                    width: '100%',\n                    minHeight: '120px',\n                    padding: '12px',\n                    border: '2px solid #d1d5db',\n                    borderRadius: '8px',\n                    fontSize: '14px',\n                    outline: 'none',\n                    resize: 'none',\n                    fontFamily: 'inherit'\n                  }}\n                  onFocus={(e) => e.target.style.borderColor = '#2563eb'}\n                  onBlur={(e) => e.target.style.borderColor = '#d1d5db'}\n                />\n              </div>\n\n              <div style={{\n                backgroundColor: '#eff6ff',\n                border: '2px solid #bfdbfe',\n                borderRadius: '12px',\n                padding: '20px'\n              }}>\n                <h4 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '12px', color: '#1e40af' }}>\n                  Quick Help Options\n                </h4>\n                <div style={{ fontSize: '14px', color: '#1e40af', lineHeight: '1.6' }}>\n                  <p style={{ margin: '6px 0' }}>• <strong>Documentation:</strong> Check our knowledge base at docs.infravision.com</p>\n                  <p style={{ margin: '6px 0' }}>• <strong>Video Tutorials:</strong> Watch getting started videos</p>\n                  <p style={{ margin: '6px 0' }}>• <strong>Community:</strong> Join our Slack community for peer support</p>\n                  <p style={{ margin: '6px 0' }}>• <strong>Emergency Support:</strong> Call +91-800-HYDROGEN for urgent issues</p>\n                </div>\n              </div>\n\n              <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '12px', paddingTop: '16px' }}>\n                <button\n                  onClick={onClose}\n                  data-testid=\"button-cancel-help\"\n                  style={{\n                    padding: '12px 24px',\n                    border: '2px solid #d1d5db',\n                    borderRadius: '8px',\n                    backgroundColor: 'white',\n                    color: '#374151',\n                    fontSize: '14px',\n                    fontWeight: '500',\n                    cursor: 'pointer',\n                    transition: 'all 0.2s'\n                  }}\n                  onMouseOver={(e) => {\n                    e.currentTarget.style.backgroundColor = '#f3f4f6';\n                    e.currentTarget.style.borderColor = '#9ca3af';\n                  }}\n                  onMouseOut={(e) => {\n                    e.currentTarget.style.backgroundColor = 'white';\n                    e.currentTarget.style.borderColor = '#d1d5db';\n                  }}\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={handleSubmit}\n                  disabled={isSubmitting || !formData.name || !formData.email || !formData.queryType || !formData.message}\n                  data-testid=\"button-submit-help\"\n                  style={{\n                    padding: '12px 24px',\n                    border: 'none',\n                    borderRadius: '8px',\n                    backgroundColor: isSubmitting || !formData.name || !formData.email || !formData.queryType || !formData.message ? '#9ca3af' : '#2563eb',\n                    color: 'white',\n                    fontSize: '14px',\n                    fontWeight: '500',\n                    cursor: isSubmitting || !formData.name || !formData.email || !formData.queryType || !formData.message ? 'not-allowed' : 'pointer',\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: '8px',\n                    transition: 'all 0.2s'\n                  }}\n                  onMouseOver={(e) => {\n                    if (!e.currentTarget.disabled) {\n                      e.currentTarget.style.backgroundColor = '#1d4ed8';\n                    }\n                  }}\n                  onMouseOut={(e) => {\n                    if (!e.currentTarget.disabled) {\n                      e.currentTarget.style.backgroundColor = '#2563eb';\n                    }\n                  }}\n                >\n                  {isSubmitting ? (\n                    'Sending...'\n                  ) : (\n                    <>\n                      <Send className=\"w-4 h-4\" />\n                      Send Message\n                    </>\n                  )}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Toast notification */}\n      {showToast && (\n        <div \n          style={{\n            position: 'fixed',\n            top: '20px',\n            right: '20px',\n            padding: '16px 20px',\n            borderRadius: '12px',\n            boxShadow: '0 20px 25px rgba(0, 0, 0, 0.4)',\n            border: '2px solid',\n            zIndex: 999999999,\n            backgroundColor: toastType === 'success' ? '#10b981' : '#ef4444',\n            borderColor: toastType === 'success' ? '#059669' : '#dc2626',\n            color: 'white',\n            fontSize: '14px',\n            fontWeight: '500',\n            maxWidth: '400px'\n          }}\n        >\n          {toastMessage}\n        </div>\n      )}\n    </>\n  );\n}","size_bytes":17761},"client/src/components/QuickActions.tsx":{"content":"import { useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Factory, \n  Download, \n  Calculator, \n  Share, \n  Plus,\n  FileText,\n  ExternalLink\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface QuickActionsProps {\n  onAddPlant: () => void;\n}\n\nexport default function QuickActions({ onAddPlant }: QuickActionsProps) {\n  const { toast } = useToast();\n  const [isCalculatorOpen, setIsCalculatorOpen] = useState(false);\n\n  const handleExportPDF = () => {\n    // Generate PDF report\n    toast({\n      title: \"Export PDF\",\n      description: \"Generating comprehensive hydrogen infrastructure report...\",\n    });\n    \n    // Simulate PDF generation\n    setTimeout(() => {\n      toast({\n        title: \"PDF Ready\",\n        description: \"Your Indian Green Hydrogen Infrastructure Report has been generated.\",\n      });\n      \n      // Create a mock PDF download\n      const link = document.createElement('a');\n      link.href = 'data:application/pdf;base64,'; // Mock PDF data\n      link.download = 'India_Hydrogen_Infrastructure_Report.pdf';\n      link.click();\n    }, 2000);\n  };\n\n  const handleShare = async () => {\n    const shareData = {\n      title: 'InfraVision - Green Hydrogen Infrastructure Planning',\n      text: 'Check out this interactive map for planning green hydrogen infrastructure across India',\n      url: window.location.href,\n    };\n\n    if (navigator.share) {\n      try {\n        await navigator.share(shareData);\n      } catch (err) {\n        // Fallback to clipboard copy\n        await navigator.clipboard.writeText(window.location.href);\n        toast({\n          title: \"Link Copied\",\n          description: \"Project link has been copied to clipboard.\",\n        });\n      }\n    } else {\n      // Fallback for browsers without Web Share API\n      await navigator.clipboard.writeText(window.location.href);\n      toast({\n        title: \"Link Copied\",\n        description: \"Project link has been copied to clipboard.\",\n      });\n    }\n  };\n\n  const openCalculator = () => {\n    setIsCalculatorOpen(true);\n    toast({\n      title: \"H2 Calculator\",\n      description: \"Opening hydrogen production and cost calculator...\",\n    });\n    \n    // Open calculator in new window/modal\n    window.open(\n      '/calculator', \n      'h2calculator', \n      'width=800,height=600,resizable=yes,scrollbars=yes'\n    );\n  };\n\n  return (\n    <div className=\"fixed bottom-20 right-4 z-50\">\n      <div className=\"flex flex-col gap-2\">\n        {/* Add Plant Button */}\n        <Button\n          size=\"icon\"\n          className=\"w-12 h-12 bg-primary hover:bg-primary/90 shadow-lg\"\n          onClick={onAddPlant}\n          data-testid=\"button-add-plant\"\n        >\n          <Plus className=\"w-5 h-5\" />\n        </Button>\n        \n        {/* Export PDF Button */}\n        <Button\n          size=\"icon\"\n          variant=\"outline\"\n          className=\"w-12 h-12 bg-card border-border shadow-lg hover:bg-muted\"\n          onClick={handleExportPDF}\n          data-testid=\"button-export-pdf\"\n        >\n          <Download className=\"w-5 h-5\" />\n        </Button>\n        \n        {/* Calculator Button */}\n        <Button\n          size=\"icon\"\n          variant=\"outline\"\n          className=\"w-12 h-12 bg-card border-border shadow-lg hover:bg-muted\"\n          onClick={openCalculator}\n          data-testid=\"button-calculator\"\n        >\n          <Calculator className=\"w-5 h-5\" />\n        </Button>\n        \n        {/* Share Button */}\n        <Button\n          size=\"icon\"\n          variant=\"outline\"\n          className=\"w-12 h-12 bg-card border-border shadow-lg hover:bg-muted\"\n          onClick={handleShare}\n          data-testid=\"button-share\"\n        >\n          <Share className=\"w-5 h-5\" />\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":3801},"client/src/pages/Calculator.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Calculator, Zap, Factory, Truck, IndianRupee } from \"lucide-react\";\n\nexport default function HydrogenCalculator() {\n  const [productionCapacity, setProductionCapacity] = useState('');\n  const [powerSource, setPowerSource] = useState('');\n  const [electricityPrice, setElectricityPrice] = useState('');\n  const [operatingHours, setOperatingHours] = useState('8760'); // Hours per year\n  const [plantType, setPlantType] = useState('');\n  \n  // Calculation results\n  const [results, setResults] = useState({\n    annualProduction: 0,\n    energyRequired: 0,\n    operatingCost: 0,\n    capitalCost: 0,\n    co2Saved: 0,\n    paybackPeriod: 0\n  });\n\n  const calculateHydrogen = () => {\n    const capacity = parseFloat(productionCapacity);\n    const hours = parseFloat(operatingHours);\n    const price = parseFloat(electricityPrice);\n    \n    if (!capacity || !hours || !price) return;\n    \n    // Indian context calculations\n    const energyPerKg = 50; // kWh per kg H2 (typical for electrolysis)\n    const annualProd = capacity * hours / 1000; // Convert to tonnes\n    const energyReq = annualProd * 1000 * energyPerKg; // Total kWh\n    const opCost = (energyReq * price) / 100000; // In lakhs INR\n    \n    // Capital cost estimates for India (in lakhs INR)\n    const capCostPerKW = plantType === 'small' ? 8 : plantType === 'medium' ? 6 : 4;\n    const capCost = (capacity * capCostPerKW) / 100000;\n    \n    // CO2 savings (Indian grid emission factor: 0.82 kg CO2/kWh)\n    const co2Saved = (annualProd * 1000 * 9.3) / 1000; // tonnes CO2 per year\n    \n    // Simple payback calculation\n    const hydrogenPrice = 300; // INR per kg (current Indian market)\n    const revenue = (annualProd * 1000 * hydrogenPrice) / 100000; // In lakhs\n    const payback = capCost / (revenue - opCost);\n    \n    setResults({\n      annualProduction: Math.round(annualProd),\n      energyRequired: Math.round(energyReq),\n      operatingCost: Math.round(opCost * 100) / 100,\n      capitalCost: Math.round(capCost * 100) / 100,\n      co2Saved: Math.round(co2Saved),\n      paybackPeriod: Math.round(payback * 10) / 10\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n            Green Hydrogen Calculator\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Calculate production costs, energy requirements, and environmental impact for hydrogen plants in India\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-6\">\n          {/* Input Panel */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calculator className=\"w-5 h-5\" />\n                Plant Parameters\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <Tabs defaultValue=\"basic\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"basic\">Basic</TabsTrigger>\n                  <TabsTrigger value=\"advanced\">Advanced</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"basic\" className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"capacity\">Production Capacity (kg/day)</Label>\n                    <Input\n                      id=\"capacity\"\n                      type=\"number\"\n                      placeholder=\"e.g., 1000\"\n                      value={productionCapacity}\n                      onChange={(e) => setProductionCapacity(e.target.value)}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"plant-type\">Plant Scale</Label>\n                    <Select value={plantType} onValueChange={setPowerSource}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select plant scale\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"small\">Small Scale (&lt; 1 MW)</SelectItem>\n                        <SelectItem value=\"medium\">Medium Scale (1-10 MW)</SelectItem>\n                        <SelectItem value=\"large\">Large Scale (&gt; 10 MW)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"power-source\">Power Source</Label>\n                    <Select value={powerSource} onValueChange={setPowerSource}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select energy source\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"solar\">Solar PV</SelectItem>\n                        <SelectItem value=\"wind\">Wind Energy</SelectItem>\n                        <SelectItem value=\"grid\">Grid Power</SelectItem>\n                        <SelectItem value=\"hybrid\">Solar + Wind Hybrid</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"electricity-price\">Electricity Price (INR/kWh)</Label>\n                    <Input\n                      id=\"electricity-price\"\n                      type=\"number\"\n                      step=\"0.1\"\n                      placeholder=\"e.g., 4.5\"\n                      value={electricityPrice}\n                      onChange={(e) => setElectricityPrice(e.target.value)}\n                    />\n                  </div>\n                </TabsContent>\n                \n                <TabsContent value=\"advanced\" className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"operating-hours\">Operating Hours/Year</Label>\n                    <Input\n                      id=\"operating-hours\"\n                      type=\"number\"\n                      value={operatingHours}\n                      onChange={(e) => setOperatingHours(e.target.value)}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Electrolyzer Efficiency (%)</Label>\n                    <Input type=\"number\" placeholder=\"75\" />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Water Cost (INR/m³)</Label>\n                    <Input type=\"number\" placeholder=\"20\" />\n                  </div>\n                </TabsContent>\n              </Tabs>\n              \n              <Button \n                onClick={calculateHydrogen} \n                className=\"w-full\"\n                disabled={!productionCapacity || !electricityPrice}\n              >\n                Calculate Economics\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Results Panel */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <IndianRupee className=\"w-5 h-5\" />\n                Economic Analysis\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <Factory className=\"w-4 h-4\" />\n                    Annual Production\n                  </div>\n                  <div className=\"text-2xl font-bold text-primary\">\n                    {results.annualProduction} tonnes\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <Zap className=\"w-4 h-4\" />\n                    Energy Required\n                  </div>\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {(results.energyRequired / 1000000).toFixed(1)} GWh\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <IndianRupee className=\"w-4 h-4\" />\n                    Operating Cost\n                  </div>\n                  <div className=\"text-2xl font-bold text-orange-600\">\n                    ₹{results.operatingCost} L/year\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <Factory className=\"w-4 h-4\" />\n                    Capital Cost\n                  </div>\n                  <div className=\"text-2xl font-bold text-red-600\">\n                    ₹{results.capitalCost} L\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <Truck className=\"w-4 h-4\" />\n                    CO₂ Saved\n                  </div>\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {results.co2Saved} tonnes/year\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <Calculator className=\"w-4 h-4\" />\n                    Payback Period\n                  </div>\n                  <div className=\"text-2xl font-bold text-purple-600\">\n                    {results.paybackPeriod} years\n                  </div>\n                </div>\n              </div>\n              \n              {/* Key Assumptions */}\n              <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n                <h4 className=\"font-semibold mb-2\">Key Assumptions (India Context)</h4>\n                <ul className=\"text-sm text-muted-foreground space-y-1\">\n                  <li>• Electrolyzer efficiency: 75%</li>\n                  <li>• Grid emission factor: 0.82 kg CO₂/kWh</li>\n                  <li>• Hydrogen price: ₹300/kg</li>\n                  <li>• Plant life: 20 years</li>\n                  <li>• CAPEX includes electrolyzer, balance of plant, installation</li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11311},"client/src/components/PlantsDashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, BarChart3, Leaf, Factory, Zap, Map } from \"lucide-react\";\nimport { ChartContainer, ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\";\nimport { BarChart, Bar, XAxis, YAxis, ResponsiveContainer, PieChart, Pie, Cell } from \"recharts\";\nimport type { HydrogenSite } from \"@/types/hydrogen\";\n\ninterface PlantsDashboardProps {\n  onClose: () => void;\n}\n\nconst chartConfig = {\n  suitability: {\n    label: \"Suitability Score\",\n  },\n  co2Saved: {\n    label: \"CO₂ Saved (kt/year)\",\n  },\n  renewable: {\n    label: \"Renewable %\",\n  },\n};\n\nexport default function PlantsDashboard({ onClose }: PlantsDashboardProps) {\n  // Fetch all hydrogen sites (user sites + AI suggestions)\n  const { data: userSites = [] } = useQuery<HydrogenSite[]>({\n    queryKey: ['/api/hydrogen-sites'],\n    refetchOnWindowFocus: false,\n  });\n\n  const { data: aiSuggestions = [] } = useQuery<HydrogenSite[]>({\n    queryKey: ['/api/ai-suggestions'],\n    refetchOnWindowFocus: false,\n  });\n\n  const allSites = [...userSites, ...aiSuggestions];\n\n  // Prepare chart data\n  const suitabilityData = allSites.map(site => ({\n    name: site.name.split(' ').slice(0, 2).join(' '),\n    score: site.suitabilityScore,\n    co2: site.co2SavedAnnually ? Math.floor(site.co2SavedAnnually / 1000) : 0,\n    renewable: site.renewableUtilization || 0\n  }));\n\n  const typeDistribution = [\n    { name: 'User Sites', value: userSites.length, color: '#3b82f6' },\n    { name: 'AI Suggested', value: aiSuggestions.length, color: '#10b981' }\n  ];\n\n  const totalCO2Saved = allSites.reduce((sum, site) => sum + (site.co2SavedAnnually || 0), 0);\n  const avgSuitability = allSites.length > 0 ? \n    Math.round(allSites.reduce((sum, site) => sum + site.suitabilityScore, 0) / allSites.length) : 0;\n  const totalIndustries = allSites.reduce((sum, site) => sum + (site.industriesSupported || 0), 0);\n\n  return (\n    <Card className=\"absolute top-4 right-4 z-[1000] w-[90vw] max-w-[600px] h-[85vh] max-h-[700px] bg-gradient-to-br from-card via-card to-muted/30 border-2 border-primary/20 shadow-2xl overflow-hidden backdrop-blur-sm\">\n      <CardHeader className=\"pb-4 border-b border-border/50 bg-gradient-to-r from-primary/5 to-secondary/5\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-lg bg-primary/10 border border-primary/20\">\n              <BarChart3 className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div>\n              <h3 className=\"text-xl font-bold text-foreground\">Plants Dashboard</h3>\n              <p className=\"text-sm text-muted-foreground\">Analytics & Insights</p>\n            </div>\n          </div>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onClose}\n            className=\"w-8 h-8 hover:bg-destructive/10 hover:text-destructive transition-colors\"\n            data-testid=\"button-close-dashboard\"\n          >\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-6 space-y-6 h-[calc(100%-5rem)] overflow-y-auto\">\n        {/* Summary Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"bg-gradient-to-br from-primary/10 to-primary/5 border border-primary/20 rounded-xl p-4 text-center hover:shadow-lg transition-all duration-300\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <div className=\"p-2 rounded-full bg-primary/20\">\n                <Map className=\"w-5 h-5 text-primary\" />\n              </div>\n            </div>\n            <div className=\"text-2xl font-bold text-foreground mb-1\">{allSites.length}</div>\n            <div className=\"text-sm text-muted-foreground font-medium\">Total Plants</div>\n          </div>\n          <div className=\"bg-gradient-to-br from-green-500/10 to-green-500/5 border border-green-500/20 rounded-xl p-4 text-center hover:shadow-lg transition-all duration-300\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <div className=\"p-2 rounded-full bg-green-500/20\">\n                <Leaf className=\"w-5 h-5 text-green-600\" />\n              </div>\n            </div>\n            <div className=\"text-2xl font-bold text-green-600 mb-1\">{Math.floor(totalCO2Saved / 1000)}kt</div>\n            <div className=\"text-sm text-muted-foreground font-medium\">CO₂ Saved/Year</div>\n          </div>\n          <div className=\"bg-gradient-to-br from-secondary/10 to-secondary/5 border border-secondary/20 rounded-xl p-4 text-center hover:shadow-lg transition-all duration-300\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <div className=\"p-2 rounded-full bg-secondary/20\">\n                <Factory className=\"w-5 h-5 text-secondary\" />\n              </div>\n            </div>\n            <div className=\"text-2xl font-bold text-secondary mb-1\">{totalIndustries}</div>\n            <div className=\"text-sm text-muted-foreground font-medium\">Industries</div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Plant Type Distribution */}\n          <div className=\"bg-gradient-to-br from-card to-muted/30 border border-border/50 rounded-xl p-4 hover:shadow-lg transition-all duration-300\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <div className=\"p-1.5 rounded-lg bg-accent/20\">\n                <BarChart3 className=\"w-4 h-4 text-accent\" />\n              </div>\n              <h4 className=\"text-base font-semibold text-foreground\">Plant Distribution</h4>\n            </div>\n            <div className=\"h-40\">\n              <ChartContainer config={chartConfig}>\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={typeDistribution}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={30}\n                      outerRadius={60}\n                      dataKey=\"value\"\n                    >\n                      {typeDistribution.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <ChartTooltip content={<ChartTooltipContent />} />\n                  </PieChart>\n                </ResponsiveContainer>\n              </ChartContainer>\n            </div>\n            <div className=\"flex justify-center gap-6 mt-3\">\n              {typeDistribution.map((item, index) => (\n                <div key={index} className=\"flex items-center gap-2 text-sm\">\n                  <div \n                    className=\"w-3 h-3 rounded-full border-2 border-white shadow-sm\" \n                    style={{ backgroundColor: item.color }}\n                  ></div>\n                  <span className=\"font-medium\">{item.name}: {item.value}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Performance Metrics */}\n          <div className=\"bg-gradient-to-br from-card to-muted/30 border border-border/50 rounded-xl p-4 hover:shadow-lg transition-all duration-300\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <div className=\"p-1.5 rounded-lg bg-primary/20\">\n                <Zap className=\"w-4 h-4 text-primary\" />\n              </div>\n              <h4 className=\"text-base font-semibold text-foreground\">Key Metrics</h4>\n            </div>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                <div className=\"flex items-center gap-2\">\n                  <Zap className=\"w-4 h-4 text-accent\" />\n                  <span className=\"text-sm font-medium\">Avg. Suitability</span>\n                </div>\n                <div className=\"text-lg font-bold text-accent\">{avgSuitability}/100</div>\n              </div>\n              <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                <div className=\"flex items-center gap-2\">\n                  <Leaf className=\"w-4 h-4 text-green-600\" />\n                  <span className=\"text-sm font-medium\">Renewable Focus</span>\n                </div>\n                <div className=\"text-lg font-bold text-green-600\">\n                  {allSites.length > 0 ? Math.round(\n                    allSites.reduce((sum, site) => sum + (site.renewableUtilization || 0), 0) / allSites.length\n                  ) : 0}%\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                <div className=\"flex items-center gap-2\">\n                  <Factory className=\"w-4 h-4 text-secondary\" />\n                  <span className=\"text-sm font-medium\">Economic Impact</span>\n                </div>\n                <div className=\"text-lg font-bold text-secondary\">₹{(allSites.length * 250).toLocaleString()}Cr</div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Suitability Scores Chart */}\n        {suitabilityData.length > 0 && (\n          <div className=\"bg-gradient-to-br from-card to-muted/30 border border-border/50 rounded-xl p-4 hover:shadow-lg transition-all duration-300\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <div className=\"p-1.5 rounded-lg bg-secondary/20\">\n                <BarChart3 className=\"w-4 h-4 text-secondary\" />\n              </div>\n              <h4 className=\"text-base font-semibold text-foreground\">Suitability Scores</h4>\n            </div>\n            <div className=\"h-48\">\n              <ChartContainer config={chartConfig}>\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={suitabilityData.slice(0, 8)} margin={{ top: 20, right: 20, left: 20, bottom: 60 }}>\n                    <XAxis \n                      dataKey=\"name\" \n                      tick={{ fontSize: 11, fill: 'hsl(var(--muted-foreground))' }}\n                      angle={-45}\n                      textAnchor=\"end\"\n                      height={60}\n                      interval={0}\n                    />\n                    <YAxis \n                      tick={{ fontSize: 11, fill: 'hsl(var(--muted-foreground))' }}\n                      domain={[0, 100]}\n                    />\n                    <ChartTooltip content={<ChartTooltipContent />} />\n                    <Bar dataKey=\"score\" fill=\"hsl(var(--primary))\" radius={[4, 4, 0, 0]} />\n                  </BarChart>\n                </ResponsiveContainer>\n              </ChartContainer>\n            </div>\n          </div>\n        )}\n\n        {allSites.length === 0 && (\n          <div className=\"text-center py-12 text-muted-foreground bg-gradient-to-br from-muted/30 to-muted/10 rounded-xl border border-dashed border-muted-foreground/30\">\n            <div className=\"p-4 rounded-full bg-muted/50 w-fit mx-auto mb-4\">\n              <Map className=\"w-8 h-8 opacity-50\" />\n            </div>\n            <h4 className=\"text-lg font-semibold mb-2\">No plants yet</h4>\n            <p className=\"text-sm mb-1\">Start exploring hydrogen infrastructure!</p>\n            <p className=\"text-xs\">Click on the map to place your first plant.</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":11593},"client/src/components/SiteAnalysisPanel.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, TrendingUp, BarChart3 } from \"lucide-react\";\nimport type { SiteAnalysis } from \"@/types/hydrogen\";\n\ninterface SiteAnalysisPanelProps {\n  analysis: SiteAnalysis;\n  onClose: () => void;\n  isLoading?: boolean;\n}\n\nexport default function SiteAnalysisPanel({ analysis, onClose, isLoading }: SiteAnalysisPanelProps) {\n  const [activeTab, setActiveTab] = useState<'suitability' | 'analysis'>('suitability');\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return \"text-green-600 dark:text-green-400\";\n    if (score >= 60) return \"text-yellow-600 dark:text-yellow-400\";\n    return \"text-red-600 dark:text-red-400\";\n  };\n\n  const getScoreLabel = (score: number) => {\n    if (score >= 80) return \"Excellent Site 🌟\";\n    if (score >= 60) return \"Good Site ✅\";\n    return \"Poor Site ❌\";\n  };\n\n  const getScoreBgColor = (score: number) => {\n    if (score >= 80) return \"bg-green-100 dark:bg-green-900/20 border-green-200\";\n    if (score >= 60) return \"bg-yellow-100 dark:bg-yellow-900/20 border-yellow-200\";\n    return \"bg-red-100 dark:bg-red-900/20 border-red-200\";\n  };\n\n  return (\n    <Card className=\"absolute top-4 left-4 z-[1000] w-72 md:w-80 lg:w-96 max-w-[calc(100vw-2rem)] bg-card border border-border shadow-lg\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className=\"font-semibold text-foreground\">Site Assessment</h3>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onClose}\n            className=\"w-6 h-6\"\n            data-testid=\"button-close-analysis\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n        \n        {/* Tab Toggle */}\n        <div className=\"flex bg-muted rounded-lg p-1\">\n          <Button\n            variant={activeTab === 'suitability' ? 'default' : 'ghost'}\n            size=\"sm\"\n            onClick={() => setActiveTab('suitability')}\n            className=\"flex-1 text-xs h-8\"\n          >\n            <BarChart3 className=\"w-3 h-3 mr-1\" />\n            Suitability\n          </Button>\n          <Button\n            variant={activeTab === 'analysis' ? 'default' : 'ghost'}\n            size=\"sm\"\n            onClick={() => setActiveTab('analysis')}\n            className=\"flex-1 text-xs h-8\"\n          >\n            <TrendingUp className=\"w-3 h-3 mr-1\" />\n            Analysis\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {activeTab === 'suitability' && (\n          <>\n            {/* Score Display */}\n            <div className=\"flex items-center space-x-3\">\n              <div className={`w-12 h-12 rounded-full flex items-center justify-center border ${getScoreBgColor(analysis.suitabilityScore)}`}>\n                <span className={`font-bold text-lg ${getScoreColor(analysis.suitabilityScore)}`} data-testid=\"text-score-value\">\n                  {analysis.suitabilityScore}\n                </span>\n              </div>\n              <div>\n                <p className={`text-sm font-medium ${getScoreColor(analysis.suitabilityScore)}`} data-testid=\"text-score-label\">\n                  {getScoreLabel(analysis.suitabilityScore)}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">Out of 100</p>\n              </div>\n            </div>\n\n            {/* Score Progress Bar */}\n            <div className=\"w-full bg-muted rounded-full h-2\">\n              <div \n                className={`h-2 rounded-full transition-all duration-300 ${\n                  analysis.suitabilityScore >= 80 ? 'bg-green-500' :\n                  analysis.suitabilityScore >= 60 ? 'bg-yellow-500' :\n                  analysis.suitabilityScore >= 40 ? 'bg-orange-500' : 'bg-red-500'\n                }`}\n                style={{ width: `${analysis.suitabilityScore}%` }}\n              ></div>\n            </div>\n\n            {/* Quick Impact Metrics */}\n            <div className=\"grid grid-cols-2 gap-3 pt-2 border-t border-border\">\n              <div className=\"bg-muted rounded p-2 text-center\">\n                <div className=\"text-sm font-bold text-green-600 dark:text-green-400\" data-testid=\"text-co2-savings\">\n                  {(analysis.co2SavedAnnually / 1000).toFixed(0)}kt\n                </div>\n                <div className=\"text-xs text-muted-foreground\">CO₂ Saved/Year</div>\n              </div>\n              <div className=\"bg-muted rounded p-2 text-center\">\n                <div className=\"text-sm font-bold text-secondary\" data-testid=\"text-industries-supported\">\n                  {analysis.industriesSupported}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">Industries</div>\n              </div>\n            </div>\n          </>\n        )}\n\n        {activeTab === 'analysis' && (\n          <>\n            {/* Key Factors */}\n            {analysis.factors && (\n              <div className=\"space-y-3\">\n                <h4 className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">Key Factors</h4>\n                <div className=\"space-y-2\">\n                  {Object.entries(analysis.factors).map(([key, value]) => (\n                    <div key={key} className=\"flex justify-between items-center text-xs bg-muted rounded p-2\">\n                      <span className=\"font-medium text-foreground capitalize\">\n                        {key.replace(/([A-Z])/g, ' $1').trim()}\n                      </span>\n                      <span className=\"text-muted-foreground font-medium\">\n                        {typeof value === 'number' ? `${value}/10` : value}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Recommendations */}\n            {analysis.recommendations && analysis.recommendations.length > 0 && (\n              <div className=\"space-y-2 pt-2 border-t border-border\">\n                <h4 className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">Recommendations</h4>\n                <ul className=\"text-xs space-y-1\">\n                  {analysis.recommendations.slice(0, 3).map((rec, index) => (\n                    <li key={index} className=\"text-foreground flex items-start\">\n                      <span className=\"text-primary mr-1\">•</span>\n                      {rec}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n\n            {/* Additional Metrics */}\n            <div className=\"grid grid-cols-2 gap-2 text-xs pt-2 border-t border-border\">\n              <div className=\"bg-muted rounded p-2 text-center\">\n                <div className=\"font-bold text-accent\" data-testid=\"text-renewable-utilization\">\n                  {analysis.renewableUtilization}%\n                </div>\n                <div className=\"text-muted-foreground\">Renewable Use</div>\n              </div>\n              <div className=\"bg-muted rounded p-2 text-center\">\n                <div className=\"font-bold text-primary\">\n                  Strong\n                </div>\n                <div className=\"text-muted-foreground\">Policy Support</div>\n              </div>\n            </div>\n          </>\n        )}\n\n        {/* Loading State */}\n        {isLoading && (\n          <div className=\"mt-3 flex items-center gap-2 text-xs text-primary\">\n            <div className=\"w-3 h-3 border-2 border-primary border-t-transparent rounded-full animate-spin\"></div>\n            Analyzing location...\n          </div>\n        )}\n\n        {/* Coordinates */}\n        <div className=\"pt-2 border-t border-border\">\n          <div className=\"text-xs text-muted-foreground\">\n            📍 Current assessment location\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7979},"client/src/components/CustomAuth.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from '@/lib/supabase';\nimport { X, Leaf, Eye, EyeOff } from 'lucide-react';\n\ninterface CustomAuthProps {\n  onClose: () => void;\n}\n\nexport default function CustomAuth({ onClose }: CustomAuthProps) {\n  const [isLogin, setIsLogin] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    username: '',\n    fullName: ''\n  });\n  const { toast } = useToast();\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSignUp = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email: formData.email,\n        password: formData.password,\n        options: {\n          data: {\n            username: formData.username,\n            full_name: formData.fullName || formData.username\n          }\n        }\n      });\n\n      if (error) throw error;\n\n      if (data.user) {\n        toast({\n          title: \"Account created!\",\n          description: \"Please check your email to verify your account.\",\n        });\n        onClose();\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSignIn = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      const { error } = await supabase.auth.signInWithPassword({\n        email: formData.email,\n        password: formData.password,\n      });\n\n      if (error) throw error;\n\n      toast({\n        title: \"Welcome back!\",\n        description: \"You've been signed in successfully.\",\n      });\n      onClose();\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <Card className=\"w-full max-w-md bg-card border border-border shadow-2xl\">\n        <CardHeader className=\"text-center pb-4 relative\">\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onClose}\n            className=\"absolute right-2 top-2 w-8 h-8\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n          \n          <div className=\"flex items-center justify-center gap-2 mb-2\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <Leaf className=\"w-4 h-4 text-primary-foreground\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-foreground\">InfraVision</h2>\n          </div>\n          <p className=\"text-muted-foreground text-sm\">\n            {isLogin ? 'Welcome back! Sign in to continue.' : 'Create your account to get started.'}\n          </p>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          <form onSubmit={isLogin ? handleSignIn : handleSignUp} className=\"space-y-4\">\n            {!isLogin && (\n              <>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\">Username</Label>\n                  <Input\n                    id=\"username\"\n                    name=\"username\"\n                    type=\"text\"\n                    placeholder=\"Choose a username\"\n                    value={formData.username}\n                    onChange={handleInputChange}\n                    required={!isLogin}\n                    className=\"w-full\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fullName\">Full Name (Optional)</Label>\n                  <Input\n                    id=\"fullName\"\n                    name=\"fullName\"\n                    type=\"text\"\n                    placeholder=\"Your full name\"\n                    value={formData.fullName}\n                    onChange={handleInputChange}\n                    className=\"w-full\"\n                  />\n                </div>\n              </>\n            )}\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"your@email.com\"\n                value={formData.email}\n                onChange={handleInputChange}\n                required\n                className=\"w-full\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder={isLogin ? \"Your password\" : \"Create a strong password\"}\n                  value={formData.password}\n                  onChange={handleInputChange}\n                  required\n                  className=\"w-full pr-10\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"absolute right-2 top-1/2 -translate-y-1/2 w-6 h-6\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                </Button>\n              </div>\n            </div>\n            \n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={loading}\n            >\n              {loading ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                  {isLogin ? 'Signing in...' : 'Creating account...'}\n                </div>\n              ) : (\n                isLogin ? 'Sign In' : 'Create Account'\n              )}\n            </Button>\n          </form>\n          \n          <div className=\"text-center\">\n            <Button\n              variant=\"link\"\n              onClick={() => setIsLogin(!isLogin)}\n              className=\"text-sm text-muted-foreground hover:text-primary\"\n            >\n              {isLogin ? \"Don't have an account? Sign up\" : \"Already have an account? Sign in\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7099},"client/src/pages/About.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { \n  ArrowLeft, \n  Users, \n  Target, \n  Zap, \n  Globe, \n  Award,\n  Github,\n  Linkedin,\n  Mail,\n  Video\n} from \"lucide-react\";\n\nexport default function About() {\n  const teamMembers = [\n    {\n      name: \"Patel Priyank\",\n      role: \"Leader\",\n      description: \"Full Stack Developer & Project Lead\",\n      icon: \"👨‍💻\"\n    },\n    {\n      name: \"Patel Yug\",\n      role: \"Developer\",\n      description: \"Backend Developer & Database Architect\",\n      icon: \"🔧\"\n    },\n    {\n      name: \"Patel Prince\",\n      role: \"Developer\", \n      description: \"Frontend Developer & UI/UX Designer\",\n      icon: \"🎨\"\n    },\n    {\n      name: \"Maalav Patadiya\",\n      role: \"Developer\",\n      description: \"AI/ML Engineer & Data Scientist\",\n      icon: \"🤖\"\n    }\n  ];\n\n  const features = [\n    {\n      icon: <Zap className=\"w-6 h-6 text-blue-600\" />,\n      title: \"Interactive Map Planning\",\n      description: \"Drag-and-drop hydrogen plant placement with real-time suitability scoring\"\n    },\n    {\n      icon: <Globe className=\"w-6 h-6 text-green-600\" />,\n      title: \"AI-Powered Suggestions\",\n      description: \"Machine learning algorithms analyze optimal locations based on infrastructure and resources\"\n    },\n    {\n      icon: <Target className=\"w-6 h-6 text-purple-600\" />,\n      title: \"Impact Visualization\",\n      description: \"Comprehensive sustainability metrics and CO₂ savings calculations\"\n    },\n    {\n      icon: <Award className=\"w-6 h-6 text-orange-600\" />,\n      title: \"Gamified Experience\",\n      description: \"Engaging scoring system makes infrastructure planning fun and educational\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"flex items-center gap-4\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"gap-2\">\n                <ArrowLeft className=\"w-4 h-4\" />\n                Back to App\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\">About InfraVision</h1>\n              <p className=\"text-muted-foreground\">Green Hydrogen Infrastructure Planning Platform</p>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        {/* Project Overview */}\n        <div className=\"mb-12\">\n          <Card className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <h2 className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-green-600 bg-clip-text text-transparent\">\n                InfraVision\n              </h2>\n              <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n                Revolutionizing green hydrogen infrastructure planning through gamification, \n                AI intelligence, and comprehensive impact visualization for a sustainable future.\n              </p>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-8 items-center\">\n              <div>\n                <h3 className=\"text-2xl font-semibold mb-4\">What is InfraVision?</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  InfraVision is an interactive web-based platform designed to make green hydrogen \n                  infrastructure planning accessible, engaging, and data-driven. Our platform combines \n                  cutting-edge AI technology with intuitive gamification to help planners, developers, \n                  and policymakers make informed decisions about hydrogen plant locations.\n                </p>\n                <p className=\"text-muted-foreground\">\n                  Built specifically for India's National Green Hydrogen Mission, InfraVision helps \n                  accelerate the transition to clean energy by optimizing hydrogen production sites \n                  based on renewable energy availability, industrial demand, and economic factors.\n                </p>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                {features.map((feature, index) => (\n                  <Card key={index} className=\"p-4 text-center\">\n                    <div className=\"flex justify-center mb-2\">\n                      {feature.icon}\n                    </div>\n                    <h4 className=\"font-semibold text-sm mb-1\">{feature.title}</h4>\n                    <p className=\"text-xs text-muted-foreground\">{feature.description}</p>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        {/* How to Use Video Tutorial */}\n        <div className=\"mb-12\">\n          <Card className=\"p-8\">\n            <div className=\"text-center mb-6\">\n              <div className=\"flex items-center justify-center gap-2 mb-4\">\n                <Video className=\"w-6 h-6 text-red-600\" />\n                <h3 className=\"text-2xl font-bold\">How to Use InfraVision</h3>\n              </div>\n              <p className=\"text-muted-foreground\">\n                Watch our quick tutorial to get started with hydrogen infrastructure planning\n              </p>\n            </div>\n            \n            <div className=\"aspect-video max-w-4xl mx-auto\">\n              <iframe\n                className=\"w-full h-full rounded-lg shadow-lg\"\n                src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" \n                title=\"InfraVision Tutorial - How to Plan Green Hydrogen Infrastructure\"\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                allowFullScreen\n              ></iframe>\n            </div>\n            \n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Learn how to place hydrogen plants, analyze suitability scores, and explore AI suggestions\n              </p>\n            </div>\n          </Card>\n        </div>\n\n        {/* Team Section */}\n        <div className=\"mb-12\">\n          <Card className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <div className=\"flex items-center justify-center gap-2 mb-4\">\n                <Users className=\"w-6 h-6 text-blue-600\" />\n                <h3 className=\"text-2xl font-bold\">Meet Team NPHard</h3>\n              </div>\n              <p className=\"text-muted-foreground\">\n                A passionate team of developers committed to sustainable technology solutions\n              </p>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {teamMembers.map((member, index) => (\n                <Card key={index} className=\"p-6 text-center hover:shadow-lg transition-shadow\">\n                  <div className=\"text-4xl mb-3\">{member.icon}</div>\n                  <h4 className=\"font-semibold text-lg mb-1\">{member.name}</h4>\n                  <div className=\"text-sm font-medium text-primary mb-2\">\n                    {member.role === \"Leader\" ? \"🎯 \" : \"💻 \"}{member.role}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">{member.description}</p>\n                </Card>\n              ))}\n            </div>\n          </Card>\n        </div>\n\n        {/* Mission & Impact */}\n        <div className=\"mb-8\">\n          <Card className=\"p-8\">\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div>\n                <h3 className=\"text-2xl font-bold mb-4 text-green-600\">Our Mission</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  To democratize green hydrogen infrastructure planning by making it accessible, \n                  engaging, and data-driven. We believe that the transition to clean energy should \n                  be guided by intelligent tools that consider both environmental impact and \n                  economic viability.\n                </p>\n                <ul className=\"space-y-2 text-sm\">\n                  <li className=\"flex items-center gap-2\">\n                    <span className=\"w-2 h-2 bg-green-600 rounded-full\"></span>\n                    Accelerate India's National Green Hydrogen Mission\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <span className=\"w-2 h-2 bg-green-600 rounded-full\"></span>\n                    Optimize renewable energy utilization\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <span className=\"w-2 h-2 bg-green-600 rounded-full\"></span>\n                    Support sustainable industrial development\n                  </li>\n                </ul>\n              </div>\n              \n              <div>\n                <h3 className=\"text-2xl font-bold mb-4 text-blue-600\">Technology Stack</h3>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Frontend</h4>\n                    <ul className=\"space-y-1 text-muted-foreground\">\n                      <li>• React + TypeScript</li>\n                      <li>• Leaflet.js Maps</li>\n                      <li>• TailwindCSS</li>\n                      <li>• Shadcn/UI</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Backend</h4>\n                    <ul className=\"space-y-1 text-muted-foreground\">\n                      <li>• Node.js + Express</li>\n                      <li>• PostgreSQL + Drizzle</li>\n                      <li>• OpenAI API</li>\n                      <li>• Gemini AI</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        {/* Contact */}\n        <div className=\"text-center\">\n          <Card className=\"p-6\">\n            <h3 className=\"text-xl font-bold mb-4\">Get in Touch</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Interested in collaborating or learning more about our project?\n            </p>\n            <div className=\"flex justify-center gap-4\">\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n                <Github className=\"w-4 h-4\" />\n                GitHub\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n                <Mail className=\"w-4 h-4\" />\n                Contact\n              </Button>\n            </div>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10841},"client/src/components/PlanDetailsPanel.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  X,\n  MapPin,\n  TrendingUp,\n  Users,\n  Leaf,\n  Factory,\n  Zap,\n  Building2,\n  Target,\n  Calendar,\n  DollarSign,\n  Truck,\n  BarChart3,\n} from \"lucide-react\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\nimport type { HydrogenSite } from \"@/types/hydrogen\";\n\ninterface PlanDetailsPanelProps {\n  plan: HydrogenSite | null;\n  onClose: () => void;\n}\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8'];\n\nexport default function PlanDetailsPanel({ plan, onClose }: PlanDetailsPanelProps) {\n  if (!plan) return null;\n\n  // Generate comprehensive plan data based on the site information\n  const generatePlanData = (site: HydrogenSite) => {\n    const capacity = Math.round(site.suitabilityScore * 0.5 + Math.random() * 20); // MW capacity\n    const investment = Math.round(capacity * 3.5 + Math.random() * 100); // Million USD\n    const yearlyProduction = Math.round(capacity * 8760 * 0.4 / 1000); // Tons per year\n    const jobsCreated = Math.round(capacity * 12 + Math.random() * 50);\n    \n    return {\n      capacity,\n      investment,\n      yearlyProduction,\n      jobsCreated,\n      operationalYear: site.name.includes('2024') ? 2024 : \n                     site.name.includes('Operational') ? 2023 : \n                     2025 + Math.floor(Math.random() * 3),\n      projectType: site.name.includes('Ammonia') ? 'Green Ammonia' :\n                  site.name.includes('Mobility') || site.name.includes('Corridor') ? 'Mobility' :\n                  site.name.includes('Blending') ? 'Gas Blending' :\n                  'Green Hydrogen',\n      status: site.name.includes('Operational') ? 'Operational' :\n             site.name.includes('Under') ? 'Under Construction' :\n             'Planned'\n    };\n  };\n\n  const planData = generatePlanData(plan);\n\n  // Pie chart data for renewable energy mix\n  const renewableEnergyMix = [\n    { name: 'Solar', value: 60, color: '#FFBB28' },\n    { name: 'Wind', value: 35, color: '#00C49F' },\n    { name: 'Hybrid', value: 5, color: '#8884d8' },\n  ];\n\n  // Bar chart data for yearly impact\n  const yearlyImpactData = [\n    { year: '2024', production: planData.yearlyProduction * 0.3, co2Saved: (plan.co2SavedAnnually || 200000) / 1000 * 0.3 },\n    { year: '2025', production: planData.yearlyProduction * 0.6, co2Saved: (plan.co2SavedAnnually || 200000) / 1000 * 0.6 },\n    { year: '2026', production: planData.yearlyProduction * 0.9, co2Saved: (plan.co2SavedAnnually || 200000) / 1000 * 0.9 },\n    { year: '2027', production: planData.yearlyProduction, co2Saved: (plan.co2SavedAnnually || 200000) / 1000 },\n    { year: '2028', production: planData.yearlyProduction * 1.1, co2Saved: (plan.co2SavedAnnually || 200000) / 1000 * 1.1 },\n  ];\n\n  // Investment breakdown\n  const investmentBreakdown = [\n    { name: 'Electrolyzer', value: 40, color: '#0088FE' },\n    { name: 'Renewable Energy', value: 30, color: '#00C49F' },\n    { name: 'Infrastructure', value: 20, color: '#FFBB28' },\n    { name: 'Other', value: 10, color: '#FF8042' },\n  ];\n\n  return (\n    <div className=\"fixed inset-y-0 right-0 w-[600px] bg-background border-l border-border shadow-2xl z-50 overflow-y-auto\">\n      <div className=\"p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-start justify-between\">\n          <div className=\"space-y-2 flex-1 pr-4\">\n            <h2 className=\"text-xl font-bold text-foreground leading-tight\">\n              {plan.name}\n            </h2>\n            <div className=\"flex items-center space-x-2\">\n              <Badge variant={planData.status === 'Operational' ? 'default' : 'secondary'}>\n                {planData.status}\n              </Badge>\n              <Badge variant=\"outline\">{planData.projectType}</Badge>\n            </div>\n            <div className=\"flex items-center space-x-1 text-sm text-muted-foreground\">\n              <MapPin className=\"w-4 h-4\" />\n              <span>{plan.latitude}°N, {plan.longitude}°E</span>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onClose}\n            className=\"shrink-0\"\n            data-testid=\"button-close-plan-details\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        <Separator />\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Card className=\"p-4\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Zap className=\"w-4 h-4 text-blue-600\" />\n              <span className=\"text-sm font-medium\">Capacity</span>\n            </div>\n            <div className=\"text-2xl font-bold text-blue-600\">{planData.capacity} MW</div>\n            <div className=\"text-xs text-muted-foreground\">Production Capacity</div>\n          </Card>\n\n          <Card className=\"p-4\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <DollarSign className=\"w-4 h-4 text-green-600\" />\n              <span className=\"text-sm font-medium\">Investment</span>\n            </div>\n            <div className=\"text-2xl font-bold text-green-600\">${planData.investment}M</div>\n            <div className=\"text-xs text-muted-foreground\">Total Investment</div>\n          </Card>\n\n          <Card className=\"p-4\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Truck className=\"w-4 h-4 text-purple-600\" />\n              <span className=\"text-sm font-medium\">Production</span>\n            </div>\n            <div className=\"text-2xl font-bold text-purple-600\">{planData.yearlyProduction}</div>\n            <div className=\"text-xs text-muted-foreground\">Tons H₂/year</div>\n          </Card>\n\n          <Card className=\"p-4\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Users className=\"w-4 h-4 text-orange-600\" />\n              <span className=\"text-sm font-medium\">Jobs</span>\n            </div>\n            <div className=\"text-2xl font-bold text-orange-600\">{planData.jobsCreated}</div>\n            <div className=\"text-xs text-muted-foreground\">Direct & Indirect</div>\n          </Card>\n        </div>\n\n        {/* Suitability Score */}\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"text-lg font-semibold flex items-center space-x-2\">\n              <Target className=\"w-4 h-4 text-primary\" />\n              <span>Suitability Analysis</span>\n            </h3>\n            <span className={`text-2xl font-bold ${plan.suitabilityScore >= 80 ? 'text-green-600' : plan.suitabilityScore >= 60 ? 'text-yellow-600' : 'text-red-600'}`}>\n              {plan.suitabilityScore}\n            </span>\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span>Renewable Energy Access</span>\n              <span className=\"font-medium\">{plan.renewableUtilization || 85}%</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span>Industrial Demand Proximity</span>\n              <span className=\"font-medium\">{Math.round(plan.suitabilityScore * 0.8)}%</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span>Infrastructure Readiness</span>\n              <span className=\"font-medium\">{Math.round(plan.suitabilityScore * 0.9)}%</span>\n            </div>\n          </div>\n        </Card>\n\n        {/* Renewable Energy Mix Chart */}\n        <Card className=\"p-4\">\n          <h3 className=\"text-lg font-semibold mb-4 flex items-center space-x-2\">\n            <Leaf className=\"w-4 h-4 text-green-600\" />\n            <span>Renewable Energy Mix</span>\n          </h3>\n          <div className=\"h-48\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <Pie\n                  data={renewableEnergyMix}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={60}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                  label={({ name, value }) => `${name}: ${value}%`}\n                >\n                  {renewableEnergyMix.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n        </Card>\n\n        {/* Investment Breakdown Chart */}\n        <Card className=\"p-4\">\n          <h3 className=\"text-lg font-semibold mb-4 flex items-center space-x-2\">\n            <DollarSign className=\"w-4 h-4 text-green-600\" />\n            <span>Investment Breakdown</span>\n          </h3>\n          <div className=\"h-48\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <Pie\n                  data={investmentBreakdown}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={60}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                  label={({ name, value }) => `${name}: ${value}%`}\n                >\n                  {investmentBreakdown.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n        </Card>\n\n        {/* Yearly Impact Projection */}\n        <Card className=\"p-4\">\n          <h3 className=\"text-lg font-semibold mb-4 flex items-center space-x-2\">\n            <BarChart3 className=\"w-4 h-4 text-blue-600\" />\n            <span>Yearly Impact Projection</span>\n          </h3>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={yearlyImpactData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"year\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"production\" fill=\"#8884d8\" name=\"H₂ Production (tons)\" />\n                <Bar dataKey=\"co2Saved\" fill=\"#82ca9d\" name=\"CO₂ Saved (kt)\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </Card>\n\n        {/* Environmental Impact */}\n        <Card className=\"p-4\">\n          <h3 className=\"text-lg font-semibold mb-4 flex items-center space-x-2\">\n            <Building2 className=\"w-4 h-4 text-green-600\" />\n            <span>Environmental Impact</span>\n          </h3>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {((plan.co2SavedAnnually || 200000) / 1000).toFixed(0)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">kt CO₂ saved/year</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {plan.industriesSupported || 15}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Industries supported</div>\n            </div>\n          </div>\n        </Card>\n\n        {/* Project Timeline */}\n        <Card className=\"p-4\">\n          <h3 className=\"text-lg font-semibold mb-4 flex items-center space-x-2\">\n            <Calendar className=\"w-4 h-4 text-purple-600\" />\n            <span>Project Timeline</span>\n          </h3>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n              <span className=\"text-sm\">Planning Phase Completed</span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className={`w-3 h-3 ${planData.status === 'Operational' ? 'bg-green-500' : 'bg-yellow-500'} rounded-full`}></div>\n              <span className=\"text-sm\">Construction {planData.status === 'Operational' ? 'Completed' : 'In Progress'}</span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className={`w-3 h-3 ${planData.status === 'Operational' ? 'bg-green-500' : 'bg-gray-300'} rounded-full`}></div>\n              <span className=\"text-sm\">Operations {planData.status === 'Operational' ? 'Active' : `Starting ${planData.operationalYear}`}</span>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":12790}},"version":1}